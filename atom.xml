<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Drelang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.drelang.cn/"/>
  <updated>2019-08-22T00:52:42.000Z</updated>
  <id>http://www.drelang.cn/</id>
  
  <author>
    <name>LanceXiong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>frp 做内网穿透</title>
    <link href="http://www.drelang.cn/2019/08/22/frp%20%E5%81%9A%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>http://www.drelang.cn/2019/08/22/frp 做内网穿透/</id>
    <published>2019-08-21T16:00:00.000Z</published>
    <updated>2019-08-22T00:52:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>最近有个需求，需要把运行在内网的 web 服务暴露到公网，使得用户通过公网就可以访问到该 web 服务，这是一个典型的内网穿透场景。经过一番搜索，发现 frp 工具还挺好用的。frp 官网地址如下：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a>。</p><h2 id="通过-frp-做内网穿透"><a href="#通过-frp-做内网穿透" class="headerlink" title="通过 frp 做内网穿透"></a>通过 frp 做内网穿透</h2><p>要想将内网服务暴露到公网，必须借助 VPS 才行，可以租用一个云服务器。在 VPS 和内网服务机器上下载对应平台最新版本的 frp 压缩包，解压可以得到可执行文件 frps 和 frpc，以及配置文件 frps.ini 和 frpc.ini。</p><h3 id="运行-frps-服务"><a href="#运行-frps-服务" class="headerlink" title="运行 frps 服务"></a>运行 frps 服务</h3><p>在VPS上修改配置文件 frps.ini，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">token = passw0rd</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = pass</span><br></pre></td></tr></table></figure></p><p>以上命令解释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bind_port = 7000  // frps服务对外服务端口为7000，frpc需要连接到该VPS的7000端口才能使用frps服务</span><br><span class="line">token = passw0rd    // frpc 连接 frps 需要使用该 token，不然 frps 拒绝服务</span><br><span class="line">dashboard_port = 7500   // 开启 frps 的管理面板，浏览器访问 VPS 的 IP 和 7500 端口，然后输入下方的账号和密码即可管理</span><br><span class="line">dashboard_user = admin   // 管理面板账号名</span><br><span class="line">dashboard_pwd = pass    // 管理面板密码</span><br></pre></td></tr></table></figure></p><p>然后在命令行运行如下命令即可挂起 fprs 服务。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure></p><h3 id="运行-frpc-服务"><a href="#运行-frpc-服务" class="headerlink" title="运行 frpc 服务"></a>运行 frpc 服务</h3><p>在内网服务机器上，修改 frpc.ini，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = xxx.xxx.xxx.xxx</span><br><span class="line">server_port = 7000</span><br><span class="line">token = passw0rd</span><br><span class="line"></span><br><span class="line">admin_addr = 127.0.0.1</span><br><span class="line">admin_port = 7400</span><br><span class="line">admin_user = admin</span><br><span class="line">admin_pwd = pass</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type=tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 8080</span><br><span class="line">remote_port = 8080</span><br></pre></td></tr></table></figure></p><p>以上命令解释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server_addr = xxx.xxx.xxx.xxx   // VPS 的 IP 地址</span><br><span class="line">server_port = 700   // VPS 运行 frps 服务的端口</span><br><span class="line">token = passw0rd    // 连接 frps 服务需要用到的 token</span><br><span class="line"></span><br><span class="line">admin_addr = 127.0.0.1  // 本地管理界面 IP</span><br><span class="line">admin_port = 7400   // 本地管理界面端口</span><br><span class="line">admin_user = admin  // 本地管理界面用户账号</span><br><span class="line">admin_pwd = pass    // 本地管理界面用户密码</span><br><span class="line"></span><br><span class="line">[web]   // 本地要暴露的服务名称</span><br><span class="line">type = tcp  // 本地要暴露的服务类型</span><br><span class="line">local_ip = 127.0.0.1    // 本地要暴露的服务的 IP</span><br><span class="line">local_port = 8080   // 本地要暴露的服务的端口。比如说本地运行了一个 tomcat 服务，服务端口为 8080</span><br><span class="line">remote_port = 8080  // 希望使用 frps 所在的 VPS 的端口，不一定需要与 local_port 保持一致</span><br></pre></td></tr></table></figure></p><p>在命令行上运行以下命令即可：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面配置好 frps 和 frpc 后，就可以通过 VPS 的 8080 端口访问内网的 8080 端口运行的服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h2&gt;&lt;p&gt;最近有个需求，需要把运行在内网的 web 服务暴露到公网，使得用户通过公网就可以访问到该 web 服务，这是一个典型的内网穿
      
    
    </summary>
    
      <category term="捣鼓" scheme="http://www.drelang.cn/categories/%E6%8D%A3%E9%BC%93/"/>
    
    
      <category term="frp" scheme="http://www.drelang.cn/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>记一次使用 samba 服务遇到的坑</title>
    <link href="http://www.drelang.cn/2019/03/28/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%20samba%20%E6%9C%8D%E5%8A%A1%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://www.drelang.cn/2019/03/28/记一次安装使用 samba 服务遇到的坑/</id>
    <published>2019-03-27T16:00:00.000Z</published>
    <updated>2019-03-28T13:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>服务端：Ubuntu 18.04<br>客户端：Windows 10 17134</p><h2 id="1-安装-smb-server"><a href="#1-安装-smb-server" class="headerlink" title="1.安装 smb server"></a>1.安装 smb server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install samba</span><br></pre></td></tr></table></figure><p>修改配置文件，文件末尾添加如下几行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[sambashare]</span><br><span class="line">    comment = Samba on Ubuntu</span><br><span class="line">    path = /home/username/sambashare</span><br><span class="line">    read only = no</span><br><span class="line">    browsable = yes</span><br></pre></td></tr></table></figure></p><p>重启 smbd 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart smbd.service</span><br></pre></td></tr></table></figure></p><p>设置访问密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo smbpasswd -a &lt;username&gt;</span><br></pre></td></tr></table></figure></p><p>注意：username 为系统中存在的用户名</p><h2 id="2-windows-client-访问-smb-server"><a href="#2-windows-client-访问-smb-server" class="headerlink" title="2.windows client 访问 smb server"></a>2.windows client 访问 smb server</h2><p>正常情况下，直接在文件管理的地址栏输入ip和共享文件夹名就行，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\ip-address\sambashare</span><br></pre></td></tr></table></figure></p><p>注意：其中的 “sambashare” 为服务器配置文件中的中括号里面的名字，而不是服务器实际共享的文件夹名！</p><p>如果遇到 windows 主机不能访问服务器共享文件夹的情况，请看以下解决方法。<br>总结一下就是，建立如下 .reg 脚本，然后双击运行就可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters]</span><br><span class="line"></span><br><span class="line">&quot;AllowInsecureGuestAuth&quot;=dword:00000001</span><br></pre></td></tr></table></figure></p><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://tutorials.ubuntu.com/tutorial/install-and-configure-samba#0" target="_blank" rel="noopener">1.install-and-configure-samba</a><br><a href="https://blog.csdn.net/weivnuo/article/details/80934241" target="_blank" rel="noopener">2.windows 10 0x80070035 找不到网络路径</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;服务端：Ubuntu 18.04&lt;br&gt;客户端：Windows 10 17134&lt;/p&gt;
&lt;h2 id=&quot;1-安装-smb-server&quot;&gt;
      
    
    </summary>
    
      <category term="折腾" scheme="http://www.drelang.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="samba" scheme="http://www.drelang.cn/tags/samba/"/>
    
  </entry>
  
  <entry>
    <title>基于 Docker 搭建局域网 Gitlab 服务</title>
    <link href="http://www.drelang.cn/2018/12/20/%E5%9F%BA%E4%BA%8E%20Docker%20%E6%90%AD%E5%BB%BA%E5%B1%80%E5%9F%9F%E7%BD%91%20Gitlab%20%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.drelang.cn/2018/12/20/基于 Docker 搭建局域网 Gitlab 服务/</id>
    <published>2018-12-19T16:00:00.000Z</published>
    <updated>2018-12-20T09:16:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><pre><code>操作系统：Ubuntu 18.04Docker Server 版本：18.09.0</code></pre><h2 id="安装-docker-ce"><a href="#安装-docker-ce" class="headerlink" title="安装 docker-ce"></a>安装 docker-ce</h2><ol><li><p>安装必要的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>添加软件源的 GPG 密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add</span><br><span class="line">-</span><br></pre></td></tr></table></figure></li><li><p>向 source.list 中添加 Docker 软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line"><span class="string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string"><span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">stable"</span></span><br></pre></td></tr></table></figure></li><li><p>安装 docker-ce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>启动 docker 守护进程,并开机自动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li><li><p>将当前用户加入 docker 组，然后注销重新登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></li><li><p>测试 docker 是否正确安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></li></ol><p>参考：<br><a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">Docker-从入门到实践</a></p><h2 id="运行-gitlab-ce-的-docker-镜像"><a href="#运行-gitlab-ce-的-docker-镜像" class="headerlink" title="运行 gitlab-ce 的 docker 镜像"></a>运行 gitlab-ce 的 docker 镜像</h2><ol><li><p>下载最新的 gitlab-ce 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></li><li><p>安装 docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-compose</span><br></pre></td></tr></table></figure></li><li><p>编写 docker-compose.yml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    gitlab:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">gitlab/gitlab-ce:latest</span></span><br><span class="line"><span class="attr">        hostname:</span> <span class="string">'&lt;ip&gt;'</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">                external_url 'https://&lt;ip&gt;:30443'</span></span><br><span class="line"><span class="string">                gitlab_rails['gitlab_shell_ssh_port'] = 30022</span></span><br><span class="line"><span class="string"></span><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'80:80'</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'30443:443'</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'30022:22'</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">./config:/etc/gitlab</span> </span><br><span class="line"><span class="bullet">            -</span> <span class="string">./logs:/var/log/gitlab</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">./data:/var/opt/gitlab</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure></li></ol><p>配置说明：</p><pre><code>主机 80 端口直接映射到容器 80 端口。主机 30443 端口映射到容器 443 端口。主机 30022 端口映射到容器 22 端口，为了能够使用 gitlab 的 ssh 功能。主机 config 文件夹保留容器内 gitlab 的配置。主机 logs 文件夹保留容器内 gitlab 运行日志。主机 data 文件夹保留容器内 gitlab 的运行数据，如用户上传文件等。</code></pre><p>参考：<br><a href="https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose" target="_blank" rel="noopener">GitLab Docs</a><br><a href="https://juejin.im/post/5a4c9ff36fb9a04507700fcc" target="_blank" rel="noopener">通过 docker 搭建自用的 gitlab 服务</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境说明&quot;&gt;&lt;a href=&quot;#环境说明&quot; class=&quot;headerlink&quot; title=&quot;环境说明&quot;&gt;&lt;/a&gt;环境说明&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;操作系统：Ubuntu 18.04
Docker Server 版本：18.09.0
&lt;/code&gt;&lt;/pr
      
    
    </summary>
    
      <category term="折腾" scheme="http://www.drelang.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Docker" scheme="http://www.drelang.cn/tags/Docker/"/>
    
      <category term="Gitlab" scheme="http://www.drelang.cn/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 学习资源</title>
    <link href="http://www.drelang.cn/2018/11/22/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    <id>http://www.drelang.cn/2018/11/22/Spring Boot 学习资源/</id>
    <published>2018-11-21T16:00:00.000Z</published>
    <updated>2018-12-20T09:06:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-入门书籍"><a href="#1-入门书籍" class="headerlink" title="1. 入门书籍"></a>1. 入门书籍</h2><p><a href="https://book.douban.com/subject/26857423/" target="_blank" rel="noopener">《Spring Boot 实战》</a>：这本书上的代码跟官网上给的代码有些不一样，而且官网上给的代码还不一定能运行。大致浏览一遍该书，了解 Spring Boot 的一些关键概念倒是可以。</p><h2 id="2-官方-Guides"><a href="#2-官方-Guides" class="headerlink" title="2. 官方 Guides"></a>2. 官方 Guides</h2><p><a href="https://spring.io/guides/gs/rest-service/" target="_blank" rel="noopener">Building a RESTful Web Service</a><br><a href="https://spring.io/guides/gs/spring-boot-docker/" target="_blank" rel="noopener">Spring Boot with Docker</a><br><a href="https://spring.io/guides/gs/accessing-data-mysql/" target="_blank" rel="noopener">Accessing data with MySQL</a><br><a href="https://spring.io/guides/gs/securing-web/" target="_blank" rel="noopener">Securing a Web Application</a><br>除了上面这些经常会用到的之外，这些链接的网站下面还有更多的 Guides ，涉及到数据库，RESTful 服务，API 文档生成 等等。</p><h2 id="3-官方-Samples"><a href="#3-官方-Samples" class="headerlink" title="3. 官方 Samples"></a>3. 官方 Samples</h2><p><a href="https://github.com/spring-io/sagan" target="_blank" rel="noopener">Sagan </a>    spring.io 官网的源码！<br><a href="https://github.com/spring-io/initializr" target="_blank" rel="noopener">Initializr</a>    创建 spring boot 项目的工具。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-入门书籍&quot;&gt;&lt;a href=&quot;#1-入门书籍&quot; class=&quot;headerlink&quot; title=&quot;1. 入门书籍&quot;&gt;&lt;/a&gt;1. 入门书籍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26857423/&quot; 
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="Spring Boot" scheme="http://www.drelang.cn/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Docker 资源整理</title>
    <link href="http://www.drelang.cn/2018/10/21/Docker%20%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/"/>
    <id>http://www.drelang.cn/2018/10/21/Docker 资源整理/</id>
    <published>2018-10-20T16:00:00.000Z</published>
    <updated>2018-12-20T08:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-学习资源"><a href="#1-学习资源" class="headerlink" title="1. 学习资源"></a>1. 学习资源</h2><p><a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">Docker 从入门到实践</a></p><p><a href="https://github.com/wsargent/docker-cheat-sheet/tree/master/zh-cn#docker-cheat-sheet" target="_blank" rel="noopener">docker-cheat-sheet</a></p><p><a href="http://search.dangdang.com/?key=docker%BC%BC%CA%F5%C8%EB%C3%C5%D3%EB%CA%B5%D5%BD%20%B5%DA3%B0%E6&amp;act=input" target="_blank" rel="noopener">http://search.dangdang.com/?key=docker%BC%BC%CA%F5%C8%EB%C3%C5%D3%EB%CA%B5%D5%BD%20%B5%DA3%B0%E6&amp;act=input</a></p><h2 id="2-Docker-GUI-工具"><a href="#2-Docker-GUI-工具" class="headerlink" title="2. Docker GUI 工具"></a>2. Docker GUI 工具</h2><p><a href="https://dockstation.io/" target="_blank" rel="noopener">DockStation</a></p><h2 id="3-官方文档"><a href="#3-官方文档" class="headerlink" title="3. 官方文档"></a>3. 官方文档</h2><p><a href="https://docs.docker.com/" target="_blank" rel="noopener">https://docs.docker.com/</a><br><a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">https://docs.docker.com/compose/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-学习资源&quot;&gt;&lt;a href=&quot;#1-学习资源&quot; class=&quot;headerlink&quot; title=&quot;1. 学习资源&quot;&gt;&lt;/a&gt;1. 学习资源&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/c
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="Docker" scheme="http://www.drelang.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Git 忽略文件夹下的文件，但是保留空文件夹</title>
    <link href="http://www.drelang.cn/2018/10/21/Git%20%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BF%9D%E7%95%99%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://www.drelang.cn/2018/10/21/Git 忽略文件夹下的文件，但是保留空文件夹/</id>
    <published>2018-10-20T16:00:00.000Z</published>
    <updated>2018-12-20T08:49:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做项目发现，想用 git 忽略掉所有日志文件，但是发现那样也会忽略掉日志文件夹，这样显得项目的结构不够完整，于是找到如下解决方法.</p><p>假设项目文件夹结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-- smartlock</span><br><span class="line">    +-- conf</span><br><span class="line">    |   +-- nginx.conf</span><br><span class="line">    |   +-- mime.types</span><br><span class="line">    |   +-- fastcgi.conf</span><br><span class="line">    +-- logs</span><br><span class="line">    +-- html</span><br><span class="line">    |   +-- css</span><br><span class="line">    |   +-- js</span><br><span class="line">    |   +-- images</span><br></pre></td></tr></table></figure></p><p>想要忽略掉 logs 文件夹下所有的日志文件，但是想保留 logs 文件夹以保持项目文件夹结构的完整性。可以在 logs 文件夹里新建 .gitignore 文件，文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ignore all except .gitignore file</span><br><span class="line">*</span><br><span class="line">!.gitignore</span><br></pre></td></tr></table></figure></p><p>然后 git add . ，就可以将 logs 文件夹添加进 git 缓存了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做项目发现，想用 git 忽略掉所有日志文件，但是发现那样也会忽略掉日志文件夹，这样显得项目的结构不够完整，于是找到如下解决方法.&lt;/p&gt;
&lt;p&gt;假设项目文件夹结构如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="Git" scheme="http://www.drelang.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>推送镜像到 Docker Hub</title>
    <link href="http://www.drelang.cn/2018/10/21/%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F%E5%88%B0%20Docker%20Hub/"/>
    <id>http://www.drelang.cn/2018/10/21/推送镜像到 Docker Hub/</id>
    <published>2018-10-20T16:00:00.000Z</published>
    <updated>2018-12-20T08:38:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-登录-Docker-Hub"><a href="#1-登录-Docker-Hub" class="headerlink" title="1. 登录 Docker Hub"></a>1. 登录 Docker Hub</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><p>根据提示，输入注册 docker hub 时的用户名和密码</p><h2 id="2-重新-tag-镜像"><a href="#2-重新-tag-镜像" class="headerlink" title="2. 重新 tag 镜像"></a>2. 重新 tag 镜像</h2><p>推送命令为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 注册用户名/镜像名</span><br></pre></td></tr></table></figure></p><p>因此要把将推送的镜像规范命名，如下所示，格式为： 注册用户名/镜像名:版本号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag &lt;IMAGE_NAME&gt; drelang/smartlock:v1</span><br></pre></td></tr></table></figure></p><p>重命名的镜像不会重新占用物理空间，只是在原有的镜像上再打一个标签。</p><h2 id="3-推送到-Docker-Hub"><a href="#3-推送到-Docker-Hub" class="headerlink" title="3. 推送到 Docker Hub"></a>3. 推送到 Docker Hub</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push drelang/smartlock:v1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-登录-Docker-Hub&quot;&gt;&lt;a href=&quot;#1-登录-Docker-Hub&quot; class=&quot;headerlink&quot; title=&quot;1. 登录 Docker Hub&quot;&gt;&lt;/a&gt;1. 登录 Docker Hub&lt;/h2&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="Docker" scheme="http://www.drelang.cn/tags/Docker/"/>
    
      <category term="Docker Hub" scheme="http://www.drelang.cn/tags/Docker-Hub/"/>
    
  </entry>
  
  <entry>
    <title>理解 Nginx 下的 fastcgi.conf 文件</title>
    <link href="http://www.drelang.cn/2018/10/21/%E7%90%86%E8%A7%A3%20Nginx%20%E4%B8%8B%E7%9A%84%20fastcgi.conf%20%E6%96%87%E4%BB%B6/"/>
    <id>http://www.drelang.cn/2018/10/21/理解 Nginx 下的 fastcgi.conf 文件/</id>
    <published>2018-10-20T16:00:00.000Z</published>
    <updated>2018-12-20T09:00:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近用 docker 来搭建 nginx + php-fpm 服务器，参考网上的教程后发现了一个不太明白的地方。Docker-compose.yml 文件如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    openresty:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">openresty/openresty:alpine</span></span><br><span class="line"><span class="attr">        network_mode:</span> <span class="string">"host"</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">./:/home</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">openresty</span> <span class="bullet">-p</span> <span class="string">/home</span> <span class="bullet">-c</span> <span class="string">conf/nginx.conf</span> <span class="bullet">-g</span> <span class="string">"daemon off;"</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    php73-fpm:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">php:7.3-rc-fpm-alpine</span></span><br><span class="line"><span class="attr">        network_mode:</span> <span class="string">"host"</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">./:/home</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure></p><p><strong>疑惑点</strong>：php73-fpm 容器下必须挂载 openresty 挂载过的文件卷？</p><p>带着疑问，在 google 上找到了答案。</p><p>Nginx 与 php-fpm 通信过程是通过 nginx 的 fastcgi 模块来处理的，即 fastcgi 模块将来自客户端的关于 php 文件的请求转发给 php-fpm 来处理。既然是转发请求，那么必须要遵循一定的协议，也就是 fastcgi.conf 所规定的协议了。</p><p>nginx.conf 中配置处理 php 文件的 location 规则如下：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /home/php;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>fastcgi.conf 文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">fastcgi_param  QUERY_STRING       $query_string;</span><br><span class="line">fastcgi_param  REQUEST_METHOD     $request_method;</span><br><span class="line">fastcgi_param  CONTENT_TYPE       $content_type;</span><br><span class="line">fastcgi_param  CONTENT_LENGTH     $content_length;</span><br><span class="line"></span><br><span class="line">fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;</span><br><span class="line">fastcgi_param  REQUEST_URI        $request_uri;</span><br><span class="line">fastcgi_param  DOCUMENT_URI       $document_uri;</span><br><span class="line">fastcgi_param  DOCUMENT_ROOT      $document_root;</span><br><span class="line">fastcgi_param  SERVER_PROTOCOL    $server_protocol;</span><br><span class="line">fastcgi_param  REQUEST_SCHEME     $scheme;</span><br><span class="line">fastcgi_param  HTTPS              $https if_not_empty;</span><br><span class="line"></span><br><span class="line">fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;</span><br><span class="line">fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;</span><br><span class="line"></span><br><span class="line">fastcgi_param  REMOTE_ADDR        $remote_addr;</span><br><span class="line">fastcgi_param  REMOTE_PORT        $remote_port;</span><br><span class="line">fastcgi_param  SERVER_ADDR        $server_addr;</span><br><span class="line">fastcgi_param  SERVER_PORT        $server_port;</span><br><span class="line">fastcgi_param  SERVER_NAME        $server_name;</span><br><span class="line"></span><br><span class="line"># PHP only, required if PHP was built with --enable-force-cgi-redirect</span><br><span class="line">fastcgi_param  REDIRECT_STATUS    200;</span><br></pre></td></tr></table></figure></p><p>其中，fastcgi_param指令指定放置PHP动态程序的主目录，也就是$fastcgi_script_name前面指定的路径，此处就是 /home/php。也就是说客户端请求 /home/php/xxx.php 文件， nginx 不能解析该文件，于是按照 fastcgi.conf 规定的规则将该请求转发给 php-fpm，其中规则指明了 php-fpm 到哪里去寻找 php 文件！</p><p>再回到前面的那个 docker 疑惑点，也就能明白为何要在 php-fpm 容器里挂载文件卷了，不然 php-fpm 容器找不到客户端要请求的 php 文件。</p><p>参考博客：</p><ol><li><a href="http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/" target="_blank" rel="noopener">Dockerise your PHP application with Nginx and PHP7-FPM</a></li><li><a href="https://segmentfault.com/a/1190000007322358" target="_blank" rel="noopener">Nginx+Php-fpm运行原理详解</a></li><li><a href="https://study.holmesian.org/nginx/StandardHTTPModules/FastCGI.html" target="_blank" rel="noopener">FastCGI模块（FastCGI）</a></li><li><a href="https://www.cnblogs.com/JohnABC/p/3529786.html" target="_blank" rel="noopener">PHP-FastCGI详解</a></li><li><a href="http://www.laruence.com/2008/08/12/180.html" target="_blank" rel="noopener">深入理解Zend SAPIs(Zend SAPI Internals)</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近用 docker 来搭建 nginx + php-fpm 服务器，参考网上的教程后发现了一个不太明白的地方。Docker-compose.yml 文件如下：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="Nginx" scheme="http://www.drelang.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 开启防火墙/开启端口</title>
    <link href="http://www.drelang.cn/2018/10/18/Ubuntu%20%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3/"/>
    <id>http://www.drelang.cn/2018/10/18/Ubuntu 开启防火墙开启端口/</id>
    <published>2018-10-17T16:00:00.000Z</published>
    <updated>2018-12-20T08:36:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-查看本地端口开启情况"><a href="#1-查看本地端口开启情况" class="headerlink" title="1. 查看本地端口开启情况"></a>1. 查看本地端口开启情况</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo ufw status</span><br><span class="line">状态： 激活</span><br><span class="line"></span><br><span class="line">至                          动作          来自</span><br><span class="line">-                          --          --</span><br><span class="line">80                         ALLOW       Anywhere                  </span><br><span class="line">8001                       ALLOW       Anywhere                  </span><br><span class="line">80 (v6)                    ALLOW       Anywhere (v6)             </span><br><span class="line">8001 (v6)                  ALLOW       Anywhere (v6)</span><br></pre></td></tr></table></figure><p>开启防火墙的状态下，只有系统允许的端口才能被其他主机访问。</p><h2 id="2-关闭防火墙"><a href="#2-关闭防火墙" class="headerlink" title="2. 关闭防火墙"></a>2. 关闭防火墙</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo ufw <span class="built_in">disable</span></span><br><span class="line">防火墙在系统启动时自动禁用</span><br><span class="line">➜  ~ sudo ufw status</span><br><span class="line">状态：不活动</span><br></pre></td></tr></table></figure><h2 id="3-开启防火墙，允许访问特定端口"><a href="#3-开启防火墙，允许访问特定端口" class="headerlink" title="3. 开启防火墙，允许访问特定端口"></a>3. 开启防火墙，允许访问特定端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo ufw <span class="built_in">enable</span> </span><br><span class="line">在系统启动时启用和激活防火墙</span><br><span class="line">➜  ~ sudo ufw allow 81</span><br><span class="line">规则已添加</span><br><span class="line">规则已添加 (v6)</span><br><span class="line">➜  ~ sudo ufw status</span><br><span class="line">状态： 激活</span><br><span class="line"></span><br><span class="line">至                          动作          来自</span><br><span class="line">-                          --          --</span><br><span class="line">80                         ALLOW       Anywhere                  </span><br><span class="line">8001                       ALLOW       Anywhere                  </span><br><span class="line">81                         ALLOW       Anywhere                  </span><br><span class="line">80 (v6)                    ALLOW       Anywhere (v6)             </span><br><span class="line">8001 (v6)                  ALLOW       Anywhere (v6)             </span><br><span class="line">81 (v6)                    ALLOW       Anywhere (v6)</span><br></pre></td></tr></table></figure><h2 id="4-不允许访问特定端口"><a href="#4-不允许访问特定端口" class="headerlink" title="4. 不允许访问特定端口"></a>4. 不允许访问特定端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo ufw deny 81</span><br><span class="line">规则已更新</span><br><span class="line">规则已更新 (v6)</span><br><span class="line">➜  ~ sudo ufw status</span><br><span class="line">状态： 激活</span><br><span class="line"></span><br><span class="line">至                          动作          来自</span><br><span class="line">-                          --          --</span><br><span class="line">80                         ALLOW       Anywhere                  </span><br><span class="line">8001                       ALLOW       Anywhere                  </span><br><span class="line">81                         DENY        Anywhere                  </span><br><span class="line">80 (v6)                    ALLOW       Anywhere (v6)             </span><br><span class="line">8001 (v6)                  ALLOW       Anywhere (v6)             </span><br><span class="line">81 (v6)                    DENY        Anywhere (v6)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-查看本地端口开启情况&quot;&gt;&lt;a href=&quot;#1-查看本地端口开启情况&quot; class=&quot;headerlink&quot; title=&quot;1. 查看本地端口开启情况&quot;&gt;&lt;/a&gt;1. 查看本地端口开启情况&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;
      
    
    </summary>
    
      <category term="折腾" scheme="http://www.drelang.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="ufw" scheme="http://www.drelang.cn/tags/ufw/"/>
    
      <category term="Ubuntu" scheme="http://www.drelang.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04 安装 sublime-text-3，并支持中文输入</title>
    <link href="http://www.drelang.cn/2018/10/16/Ubuntu18.04%20%E5%AE%89%E8%A3%85%20sublime-text-3%EF%BC%8C%E5%B9%B6%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/"/>
    <id>http://www.drelang.cn/2018/10/16/Ubuntu18.04 安装 sublime-text-3，并支持中文输入/</id>
    <published>2018-10-15T16:00:00.000Z</published>
    <updated>2018-12-20T08:32:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-sublime-text-3"><a href="#安装-sublime-text-3" class="headerlink" title="安装 sublime-text-3"></a>安装 sublime-text-3</h2><p>sublime 官网推荐添加 apt-get 源来在线安装，但是不知道为啥，电脑一直添加不了安装源，于是放弃。然而，官网提供的压缩包，也下载不了，也因此放弃。最后，找到了一个可靠的压缩包来源 <a href="https://www.techspot.com/downloads/5546-sublime-text.html" target="_blank" rel="noopener">https://www.techspot.com/downloads/5546-sublime-text.html </a></p><p>下载压缩包后，将压缩包放到 /opt 文件夹下，然后解压命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -jxvf sublime_text_3_build_3176_x64.tar.bz2</span><br></pre></td></tr></table></figure></p><p>解压后得到文件夹 sublime_text_3，注意此时的解压文件，因为后面会用到。<br>此时，做一个软链接，就可以在命令行启动 sublime 了，软链接命令如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /opt/sublime_text_3/sublime_text /usr/bin/subl</span><br></pre></td></tr></table></figure></p><h2 id="支持中文输入"><a href="#支持中文输入" class="headerlink" title="支持中文输入"></a>支持中文输入</h2><p>Github 有人整理了解决让 sublime 支持中文输入的问题，源码地址如下：<br><a href="https://github.com/lyfeyaj/sublime-text-imfix" target="_blank" rel="noopener">https://github.com/lyfeyaj/sublime-text-imfix</a></p><p>按照提示，直接一条 ./sublime-imfix 命令即可修复问题，但是由于我是从源码安装的 sublime，因此要修改 src/subl 文件才行。</p><p>原文件内容如下所示:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so</span><br><span class="line"><span class="built_in">exec</span> /opt/sublime_text/sublime_text <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure></p><p>改成如下内容即可，主要是第四行的路径，让 shell 脚本找到 sublime 可执行文件即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so</span><br><span class="line"><span class="built_in">exec</span> /opt/sublime_text/sublime_text_3/sublime_text <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure></p><p>最后，别忘记将系统的输入法改成 fcitx !!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-sublime-text-3&quot;&gt;&lt;a href=&quot;#安装-sublime-text-3&quot; class=&quot;headerlink&quot; title=&quot;安装 sublime-text-3&quot;&gt;&lt;/a&gt;安装 sublime-text-3&lt;/h2&gt;&lt;p&gt;sublime 官网
      
    
    </summary>
    
      <category term="折腾" scheme="http://www.drelang.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Sublime-text-3" scheme="http://www.drelang.cn/tags/Sublime-text-3/"/>
    
  </entry>
  
  <entry>
    <title>Git 无法添加文件夹下的文件</title>
    <link href="http://www.drelang.cn/2018/10/15/Git%20%E6%97%A0%E6%B3%95%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://www.drelang.cn/2018/10/15/Git 无法添加文件夹下的文件/</id>
    <published>2018-10-14T16:00:00.000Z</published>
    <updated>2018-12-20T08:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论使用啥命令，都无法将文件夹下的某些文件添加进 Git 进行版本控制，Git 提示信息如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 <span class="string">"git add &lt;文件&gt;..."</span> 更新要提交的内容）</span><br><span class="line">  （使用 <span class="string">"git checkout -- &lt;文件&gt;..."</span> 丢弃工作区的改动）</span><br><span class="line">  （提交或丢弃子模组中未跟踪或修改的内容）</span><br><span class="line"></span><br><span class="line">        修改：     php/getui (修改的内容, 未跟踪的内容)</span><br></pre></td></tr></table></figure></p><p>后来经过艰难的搜索，终于发现原来是子文件夹下面含有 .git 文件夹，因此导致该子文件夹无法被 Git 跟踪，可以通过以下方法解决：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached folder</span><br><span class="line">git add folder</span><br></pre></td></tr></table></figure></p><p>其中 folder 为子文件夹。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;无论使用啥命令，都无法将文件夹下的某些文件添加进 Git 进行版本控制，Git 提示信息如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="Git" scheme="http://www.drelang.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>sql插入数据已经存在，则执行update更新</title>
    <link href="http://www.drelang.cn/2018/10/14/sql%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%88%99%E6%89%A7%E8%A1%8Cupdate%E6%9B%B4%E6%96%B0/"/>
    <id>http://www.drelang.cn/2018/10/14/sql插入数据已经存在，则执行update更新/</id>
    <published>2018-10-13T16:00:00.000Z</published>
    <updated>2018-12-20T08:23:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="http://www.111cn.net/database/mysql/76509.htm" target="_blank" rel="noopener">http://www.111cn.net/database/mysql/76509.htm</a></p><p>总结下，最好用的语法应该如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">replace</span> <span class="keyword">into</span> testtb(<span class="keyword">id</span>,<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="number">1</span>,<span class="string">"aa"</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure></p><p>其中 testtb 为表名，id为主键，一定要设置主键。如果上述记录不存在，则插入该条新纪录；如果上述记录存在，则更新该记录.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址：&lt;a href=&quot;http://www.111cn.net/database/mysql/76509.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.111cn.net/database/mysql/76509.htm
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="MySQL" scheme="http://www.drelang.cn/tags/MySQL/"/>
    
      <category term="转载" scheme="http://www.drelang.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 5.7 添加用户，授权，删除用户</title>
    <link href="http://www.drelang.cn/2018/10/10/MySQL%205.7%20%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%EF%BC%8C%E6%8E%88%E6%9D%83%EF%BC%8C%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/"/>
    <id>http://www.drelang.cn/2018/10/10/MySQL 5.7 添加用户，授权，删除用户/</id>
    <published>2018-10-09T16:00:00.000Z</published>
    <updated>2018-12-23T04:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">create user &apos;&lt;USERNAME&gt;&apos;@&apos;&lt;HOST&gt;&apos; identified by &apos;&lt;PASSWORD&gt;&apos;;</span><br></pre></td></tr></table></figure><p><strong>USERNAME：</strong>为登录 mysql 的用户名。<br><strong>HOST：</strong>为登录 mysql 的主机地址。如 HOST=localhost 时，只能本地访问；HOST=% 时，任何主机都可以访问，但是要修改文件 /etc/mysql/mysql.conf.d/mysqld.cnf ，注释掉 bind-address = 127.0.0.1；若要指定一定网段的 HOST，则可以将网段设置如下: HOST=192.168.8.% 。<br><strong>PASSWORD</strong>：用 USERNAME 指定的用户的登录密码。</p><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> &lt;DATABASE_NAME&gt; <span class="keyword">default</span> <span class="keyword">charset</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> &lt;DATABASE_NAME&gt;.* <span class="keyword">to</span> <span class="string">'&lt;USERNAME&gt;'</span>@<span class="string">'&lt;HOST&gt;'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'&lt;PASSWORD&gt;'</span>;</span><br></pre></td></tr></table></figure><p>以上命令先创建了一个名为 DATABASE_NAME 的数据库，字符集为 utf8。然后将所有权限授予了主机地址为 HOST，用户名为 USERNAME，密码为 PASSWORD 的用户。</p><h2 id="删除数据库、用户"><a href="#删除数据库、用户" class="headerlink" title="删除数据库、用户"></a>删除数据库、用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> &lt;DATABASE_NAME&gt;;    <span class="comment">-- 删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">'&lt;USERNAME&gt;'</span>@<span class="string">'&lt;HOST&gt;'</span>;  <span class="comment">-- 删除用户</span></span><br></pre></td></tr></table></figure><h2 id="查看数据库所有用户、主机地址和密码"><a href="#查看数据库所有用户、主机地址和密码" class="headerlink" title="查看数据库所有用户、主机地址和密码"></a>查看数据库所有用户、主机地址和密码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host,authentication_string <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h2 id="执行-SQL-文件"><a href="#执行-SQL-文件" class="headerlink" title="执行 SQL 文件"></a>执行 SQL 文件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /path/to/sql_file</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;添加用户&quot;&gt;&lt;a href=&quot;#添加用户&quot; class=&quot;headerlink&quot; title=&quot;添加用户&quot;&gt;&lt;/a&gt;添加用户&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.drelang.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>nginx lua/openresty 相关资源整理</title>
    <link href="http://www.drelang.cn/2018/10/10/nginx%20luaopenresty%20%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/"/>
    <id>http://www.drelang.cn/2018/10/10/nginx luaopenresty 相关资源整理/</id>
    <published>2018-10-09T16:00:00.000Z</published>
    <updated>2018-12-20T08:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lua-包管理工具："><a href="#Lua-包管理工具：" class="headerlink" title="Lua 包管理工具："></a>Lua 包管理工具：</h2><p>Lua的包管理工具为 luarocks，在官网 <a href="https://luarocks.org/" target="_blank" rel="noopener">https://luarocks.org/</a> 可以找到各种有用的 lua 包。</p><h2 id="openresty-手册："><a href="#openresty-手册：" class="headerlink" title="openresty 手册："></a>openresty 手册：</h2><p><a href="https://www.nginx.com/resources/wiki/modules/lua/" target="_blank" rel="noopener">https://www.nginx.com/resources/wiki/modules/lua/</a></p><h2 id="一些有质量的-openresty-的库和资源："><a href="#一些有质量的-openresty-的库和资源：" class="headerlink" title="一些有质量的 openresty 的库和资源："></a>一些有质量的 openresty 的库和资源：</h2><p>参看 Github 上别人的整理  <a href="https://github.com/bungle/awesome-resty#authentication-and-authorization" target="_blank" rel="noopener">https://github.com/bungle/awesome-resty#authentication-and-authorization</a></p><p>##相关书籍：</p><ol><li>《深入理解 Nginx：模块开发与架构解析》第二版，陶辉 著。</li><li>《Nginx Lua 开发实战》，李明江 著。</li></ol><p>持续更新。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lua-包管理工具：&quot;&gt;&lt;a href=&quot;#Lua-包管理工具：&quot; class=&quot;headerlink&quot; title=&quot;Lua 包管理工具：&quot;&gt;&lt;/a&gt;Lua 包管理工具：&lt;/h2&gt;&lt;p&gt;Lua的包管理工具为 luarocks，在官网 &lt;a href=&quot;https
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="Nginx" scheme="http://www.drelang.cn/tags/Nginx/"/>
    
      <category term="Lua" scheme="http://www.drelang.cn/tags/Lua/"/>
    
      <category term="Openresty" scheme="http://www.drelang.cn/tags/Openresty/"/>
    
  </entry>
  
  <entry>
    <title>openresty1.13 与 nginx+php7.0-fpm 压测对比</title>
    <link href="http://www.drelang.cn/2018/09/27/openresty1.13%20%E4%B8%8E%20nginx+php7.0-fpm%20%E5%8E%8B%E6%B5%8B%E5%AF%B9%E6%AF%94/"/>
    <id>http://www.drelang.cn/2018/09/27/openresty1.13 与 nginx+php7.0-fpm 压测对比/</id>
    <published>2018-09-26T16:00:00.000Z</published>
    <updated>2018-12-20T08:23:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了验证下 openresty 官网所说的比 nginx+php-fpm 的吞吐量要高，因此做了以下测试，本次测试服务器硬件配置如下:</p><p>Dell latitude 3330</p><p>CPU: 4 core  Intel(R) Core(TM) i5-3337U CPU @ 1.80GHz</p><p>MEM: 8GB</p><p>本次测试两种架构下，服务器都发送 “Hello,world!” 这一字符串。</p><h2 id="1-100并发，50k请求"><a href="#1-100并发，50k请求" class="headerlink" title="1. 100并发，50k请求"></a>1. 100并发，50k请求</h2><p>以下为 openresty 的压测结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ab -c 100 -n 50000 -q http://192.168.8.156:8090/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1706008 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.8.156 (be patient).....<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        openresty/1.13.6.2</span><br><span class="line">Server Hostname:        192.168.8.156</span><br><span class="line">Server Port:            8090</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        20 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   2.743 seconds</span><br><span class="line">Complete requests:      50000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      8400000 bytes</span><br><span class="line">HTML transferred:       1000000 bytes</span><br><span class="line">Requests per second:    18226.60 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       5.486 [ms] (mean)</span><br><span class="line">Time per request:       0.055 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          2990.30 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        1    2   0.6      2       5</span><br><span class="line">Processing:     1    3   0.7      3      10</span><br><span class="line">Waiting:        1    2   0.6      2      10</span><br><span class="line">Total:          4    5   0.5      5      15</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%      5</span><br><span class="line">  66%      6</span><br><span class="line">  75%      6</span><br><span class="line">  80%      6</span><br><span class="line">  90%      6</span><br><span class="line">  95%      6</span><br><span class="line">  98%      6</span><br><span class="line">  99%      7</span><br><span class="line"> 100%     15 (longest request)</span><br></pre></td></tr></table></figure></p><p>以下为 nginx+php7.0-fpm 的压测结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ab -c 100 -n 50000 -q http://192.168.8.156:8080/test.php</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1706008 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.8.156 (be patient).....<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.15.3</span><br><span class="line">Server Hostname:        192.168.8.156</span><br><span class="line">Server Port:            8080</span><br><span class="line"></span><br><span class="line">Document Path:          /test.php</span><br><span class="line">Document Length:        13 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   3.380 seconds</span><br><span class="line">Complete requests:      50000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      7500000 bytes</span><br><span class="line">HTML transferred:       650000 bytes</span><br><span class="line">Requests per second:    14791.25 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       6.761 [ms] (mean)</span><br><span class="line">Time per request:       0.068 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          2166.69 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    1   0.6      0       5</span><br><span class="line">Processing:     2    6   1.2      6      14</span><br><span class="line">Waiting:        1    6   1.3      6      14</span><br><span class="line">Total:          4    7   1.1      6      15</span><br><span class="line">WARNING: The median and mean <span class="keyword">for</span> the initial connection time are not within a normal deviation</span><br><span class="line">        These results are probably not that reliable.</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%      6</span><br><span class="line">  66%      7</span><br><span class="line">  75%      7</span><br><span class="line">  80%      8</span><br><span class="line">  90%      8</span><br><span class="line">  95%      9</span><br><span class="line">  98%     10</span><br><span class="line">  99%     11</span><br><span class="line"> 100%     15 (longest request)</span><br></pre></td></tr></table></figure></p><h2 id="2-1k并发，50k请求"><a href="#2-1k并发，50k请求" class="headerlink" title="2. 1k并发，50k请求"></a>2. 1k并发，50k请求</h2><p>以下为 openresty 的压测结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ab -c 1000 -n 50000 -q http://192.168.8.156:8090/       </span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1706008 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.8.156 (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        openresty/1.13.6.2</span><br><span class="line">Server Hostname:        192.168.8.156</span><br><span class="line">Server Port:            8090</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        20 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      1000</span><br><span class="line">Time taken for tests:   3.445 seconds</span><br><span class="line">Complete requests:      50000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      8400000 bytes</span><br><span class="line">HTML transferred:       1000000 bytes</span><br><span class="line">Requests per second:    14514.61 [#/sec] (mean)</span><br><span class="line">Time per request:       68.896 [ms] (mean)</span><br><span class="line">Time per request:       0.069 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          2381.30 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:       10   24  22.2     23    1030</span><br><span class="line">Processing:     7   35  30.5     33     772</span><br><span class="line">Waiting:        5   27  30.7     25     771</span><br><span class="line">Total:         27   58  37.1     57    1057</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     57</span><br><span class="line">  66%     60</span><br><span class="line">  75%     61</span><br><span class="line">  80%     62</span><br><span class="line">  90%     63</span><br><span class="line">  95%     64</span><br><span class="line">  98%     67</span><br><span class="line">  99%     75</span><br><span class="line"> 100%   1057 (longest request)</span><br></pre></td></tr></table></figure></p><p>以下为 nginx+php7.0-fpm 的压测结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ab -c 1000 -n 50000 -q http://192.168.8.156:8080/test.php</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1706008 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.8.156 (be patient).....<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.15.3</span><br><span class="line">Server Hostname:        192.168.8.156</span><br><span class="line">Server Port:            8080</span><br><span class="line"></span><br><span class="line">Document Path:          /test.php</span><br><span class="line">Document Length:        13 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      1000</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   5.165 seconds</span><br><span class="line">Complete requests:      50000</span><br><span class="line">Failed requests:        14407</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 14407, Exceptions: 0)</span><br><span class="line">Non-2xx responses:      14407</span><br><span class="line">Total transferred:      14962826 bytes</span><br><span class="line">HTML transferred:       7579767 bytes</span><br><span class="line">Requests per second:    9680.80 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       103.297 [ms] (mean)</span><br><span class="line">Time per request:       0.103 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          2829.14 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        7   28 114.9     14    1043</span><br><span class="line">Processing:     7   34  64.3     23    2021</span><br><span class="line">Waiting:        7   31  64.2     20    2021</span><br><span class="line">Total:         14   62 133.9     37    3028</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     37</span><br><span class="line">  66%     42</span><br><span class="line">  75%     46</span><br><span class="line">  80%     48</span><br><span class="line">  90%     57</span><br><span class="line">  95%     72</span><br><span class="line">  98%    387</span><br><span class="line">  99%   1034</span><br><span class="line"> 100%   3028 (longest request)</span><br></pre></td></tr></table></figure></p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><table><thead><tr><th>并发情况</th><th>吞吐量</th><th>平均完成时间</th><th>90%完成时间</th></tr></thead><tbody><tr><td>c100 n50k</td><td>18226.6/14791.25</td><td>5/7</td><td>6/8</td></tr><tr><td>c1k  n50k</td><td>14514.61/9680.80</td><td>58/62</td><td>63/57</td></tr></tbody></table><p>​<br>以上数据对比格式为： openresty/nginx+php7.0-fpm</p><p>从上面对比情况可以看出，openresty 在并发情况下吞吐量的确要比 nginx+php7.0-fpm 高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了验证下 openresty 官网所说的比 nginx+php-fpm 的吞吐量要高，因此做了以下测试，本次测试服务器硬件配置如下:&lt;/p&gt;
&lt;p&gt;Dell latitude 3330&lt;/p&gt;
&lt;p&gt;CPU: 4 core  Intel(R) Core(TM) i5-33
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="openresty" scheme="http://www.drelang.cn/tags/openresty/"/>
    
      <category term="nginx" scheme="http://www.drelang.cn/tags/nginx/"/>
    
      <category term="php7.0-fpm" scheme="http://www.drelang.cn/tags/php7-0-fpm/"/>
    
  </entry>
  
  <entry>
    <title>Linux 查看 cpu, mem, disk 和 network 信息</title>
    <link href="http://www.drelang.cn/2018/09/13/Linux%20%E6%9F%A5%E7%9C%8B%20cpu,%20mem,%20disk%20%E5%92%8C%20network%20%E4%BF%A1%E6%81%AF/"/>
    <id>http://www.drelang.cn/2018/09/13/Linux 查看 cpu, mem, disk 和 network 信息/</id>
    <published>2018-09-12T16:00:00.000Z</published>
    <updated>2018-12-20T08:16:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个 Linux 服务器来说，cpu 的主频以及占用率，内存的大小以及占用率，磁盘 I/O 速率和网卡 I/O 速率极大地影响着服务器的性能。在 Linux 系统下，开发者提供了/proc 文件系统来提供系统相关的进程信息</p><h2 id="1-查看-cpu-主频和占用率"><a href="#1-查看-cpu-主频和占用率" class="headerlink" title="1.查看 cpu 主频和占用率"></a>1.查看 cpu 主频和占用率</h2><p>Linux 下 CPU 的主频有两种获取方式，一种是通过读取 /proc/cpuinfo 文件，另外一种是利用 CPU 主频的计算原理编写程序获取。此处只介绍前一种方式。即使用命令 cat /proc/cpuinfo 。从下方图片可以看到，本人的电脑是双核 CPU，主频都为 2.60GHz。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Lance<span class="comment"># cat /proc/cpuinfo</span></span><br><span class="line">processor       : 0</span><br><span class="line">vendor_id       : GenuineIntel</span><br><span class="line">cpu family      : 6</span><br><span class="line">model           : 23</span><br><span class="line">model name      : Pentium(R) Dual-Core  CPU      E5300  @ 2.60GHz</span><br><span class="line">stepping        : 10</span><br><span class="line">microcode       : 0xa0b</span><br><span class="line">cpu MHz         : 1200.000</span><br><span class="line">cache size      : 2048 KB</span><br><span class="line">physical id     : 0</span><br><span class="line">siblings        : 2</span><br><span class="line">core id         : 0</span><br><span class="line">cpu cores       : 2</span><br><span class="line">apicid          : 0</span><br><span class="line">initial apicid  : 0</span><br><span class="line">fpu             : yes</span><br><span class="line">fpu_exception   : yes</span><br><span class="line">cpuid level     : 13</span><br><span class="line">wp              : yes</span><br><span class="line">flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good nopl cpuid aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm xsave lahf_lm pti tpr_shadow vnmi flexpriority dtherm</span><br><span class="line">bugs            : cpu_meltdown spectre_v1 spectre_v2</span><br><span class="line">bogomips        : 5186.86</span><br><span class="line">clflush size    : 64</span><br><span class="line">cache_alignment : 64</span><br><span class="line">address sizes   : 36 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br><span class="line"></span><br><span class="line">processor       : 1</span><br><span class="line">vendor_id       : GenuineIntel</span><br><span class="line">cpu family      : 6</span><br><span class="line">model           : 23</span><br><span class="line">model name      : Pentium(R) Dual-Core  CPU      E5300  @ 2.60GHz</span><br><span class="line">stepping        : 10</span><br><span class="line">microcode       : 0xa0b</span><br><span class="line">cpu MHz         : 1200.000</span><br><span class="line">cache size      : 2048 KB</span><br><span class="line">physical id     : 0</span><br><span class="line">siblings        : 2</span><br><span class="line">core id         : 1</span><br><span class="line">cpu cores       : 2</span><br><span class="line">apicid          : 1</span><br><span class="line">initial apicid  : 1</span><br><span class="line">fpu             : yes</span><br><span class="line">fpu_exception   : yes</span><br><span class="line">cpuid level     : 13</span><br><span class="line">wp              : yes</span><br><span class="line">flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good nopl cpuid aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm xsave lahf_lm pti tpr_shadow vnmi flexpriority dtherm</span><br><span class="line">bugs            : cpu_meltdown spectre_v1 spectre_v2</span><br><span class="line">bogomips        : 5186.86</span><br><span class="line">clflush size    : 64</span><br><span class="line">cache_alignment : 64</span><br><span class="line">address sizes   : 36 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br></pre></td></tr></table></figure></p><p>Linux 下 CPU 的使用状态可分为用户态、系统态以及空闲态。CPU 占用率可以用如下公式计算</p><pre><code>CPU占用率 = CPU执行非系统空闲进程时间/CPU执行总时间</code></pre><p>/proc/stat 文件对 CPU 的使用情况进行了实时的记录，如下图所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Lance<span class="comment"># cat /proc/stat</span></span><br><span class="line">cpu  525228 16439 390034 139932703 224352 0 2010 0 0 0</span><br><span class="line">cpu0 265224 6822 197250 70017169 60063 0 74 0 0 0</span><br><span class="line">cpu1 260004 9617 192784 69915534 164289 0 1936 0 0 0</span><br><span class="line">intr 126884204 43 2 0 0 0 0 0 1 0 3 0 0 4 0 0 0 124 0 2 1404563 0 0 0 0 955106 514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line">ctxt 193899569</span><br><span class="line">btime 1536131324</span><br><span class="line">processes 268172</span><br><span class="line">procs_running 1</span><br><span class="line">procs_blocked 0</span><br><span class="line">softirq 101783843 10 36600014 116255 1002291 1058479 0 263 35993177 0 27013354</span><br></pre></td></tr></table></figure></p><p>其中首行的 10 个参数含义如下：</p><pre><code>user    nice    system  idle    iowait  irq softirq steal   guest   guest_niceuser:用户态的CPU时间nice：低优先级程序所占用的用户态的cpu时间。system：系统态的CPU时间idle：CPU空闲的时间iowait：等待IO响应的时间irq：处理硬件中断的时间softirq：处理软中断的时间steal: 处理其他所花的时间guest：运行时间为客户操作系统下的虚拟CPU控制guest_nice：访客的低优先级程序所占用的用户态的cpu时间</code></pre><p>余下的参数中：</p><pre><code>intr: 第一个参数表示的是自系统启动以来，发生的所有中断的次数；其他的数对应一个特定中断发生的次数ctxt: cpu自系统启动以来发生的上下文交换次数btime: 系统启动到现在的时间 UTC 秒processes: 表示系统启动以来创建的进程个数procs_running: 当前运行进程的个数procs_blocked: 当前被阻塞的进程个数softirq: 显示软中断情况</code></pre><p>要计算 CPU 在某段时间内的占用率，可以分别记录下 t1 和 t2 时刻的 CPU 总的状态和空闲状态，因此：</p><pre><code>CPU占用率 = 1 - ( idle2 - idle1 ) / (total2 - total1)</code></pre><p>其中 total 表示 10 个参数之和。</p><h2 id="2-查看内存大小及占用率"><a href="#2-查看内存大小及占用率" class="headerlink" title="2. 查看内存大小及占用率"></a>2. 查看内存大小及占用率</h2><p>/proc/meminfo 记录了内存信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Lance<span class="comment"># cat /proc/meminfo</span></span><br><span class="line">MemTotal:        4003752 kB</span><br><span class="line">MemFree:          517464 kB</span><br><span class="line">MemAvailable:    3144816 kB</span><br><span class="line">Buffers:          257152 kB</span><br><span class="line">Cached:          2289308 kB</span><br><span class="line">SwapCached:            0 kB</span><br><span class="line">Active:          1455916 kB</span><br><span class="line">Inactive:        1487740 kB</span><br><span class="line">Active(anon):     277376 kB</span><br><span class="line">Inactive(anon):   174624 kB</span><br><span class="line">Active(file):    1178540 kB</span><br><span class="line">Inactive(file):  1313116 kB</span><br><span class="line">Unevictable:           0 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">SwapTotal:       6253564 kB</span><br><span class="line">SwapFree:        6253564 kB</span><br><span class="line">Dirty:                 8 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:        395168 kB</span><br><span class="line">Mapped:           207872 kB</span><br><span class="line">Shmem:             54808 kB</span><br><span class="line">Slab:             460364 kB</span><br><span class="line">SReclaimable:     425200 kB</span><br><span class="line">SUnreclaim:        35164 kB</span><br><span class="line">KernelStack:        5376 kB</span><br><span class="line">PageTables:        22064 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:     8255440 kB</span><br><span class="line">Committed_AS:    2553704 kB</span><br><span class="line">VmallocTotal:   34359738367 kB</span><br><span class="line">VmallocUsed:           0 kB</span><br><span class="line">VmallocChunk:          0 kB</span><br><span class="line">HardwareCorrupted:     0 kB</span><br><span class="line">AnonHugePages:      2048 kB</span><br><span class="line">ShmemHugePages:        0 kB</span><br><span class="line">ShmemPmdMapped:        0 kB</span><br><span class="line">CmaTotal:              0 kB</span><br><span class="line">CmaFree:               0 kB</span><br><span class="line">HugePages_Total:       0</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br><span class="line">DirectMap4k:      113216 kB</span><br><span class="line">DirectMap2M:     4044800 kB</span><br></pre></td></tr></table></figure></p><p>其中：</p><pre><code>MemTotal：表示系统可支配内存MemAvailable：表示应用程序可用的内存</code></pre><p>因此，内存占用率可以用如下公式计算：</p><h2 id="3-查看磁盘-I-O占用率"><a href="#3-查看磁盘-I-O占用率" class="headerlink" title="3.查看磁盘 I/O占用率"></a>3.查看磁盘 I/O占用率</h2><p>安装 sysstat 工具，它的子工具 iostat 可以显示 I/O 占用率。%util 参数表示 1s内用于 I/O 请求所用时间的比例，%util 值越高，I/O 占用率越高，可直接使用这个参数来代表 I/O 占用率<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Lance<span class="comment"># iostat -x</span></span><br><span class="line">Linux 4.13.0-32-generic (Lance)         2018年09月13日  _x86_64_        (2 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           0.37    0.01    0.28    0.16    0.00   99.17</span><br><span class="line"></span><br><span class="line">Device            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util</span><br><span class="line">loop0            0.00    0.00      0.00      0.00     0.00     0.00   0.00   0.00   21.41    0.00   0.00     2.44     0.00  20.89   0.00</span><br><span class="line">loop1            0.00    0.00      0.00      0.00     0.00     0.00   0.00   0.00   44.62    0.00   0.00     1.69     0.00  11.38   0.00</span><br><span class="line">loop2            0.00    0.00      0.00      0.00     0.00     0.00   0.00   0.00   19.93    0.00   0.00     9.65     0.00  12.31   0.00</span><br><span class="line">loop3            0.00    0.00      0.00      0.00     0.00     0.00   0.00   0.00   41.81    0.00   0.00    14.23     0.00  18.88   0.00</span><br><span class="line">loop4            0.01    0.00      0.01      0.00     0.00     0.00   0.00   0.00    6.61    0.00   0.00     1.12     0.00   0.50   0.00</span><br><span class="line">loop5            0.00    0.00      0.00      0.00     0.00     0.00   0.00   0.00    0.00    0.00   0.00     1.60     0.00   0.00   0.00</span><br><span class="line">sda              0.24    0.52      3.45     14.18     0.17     0.56  41.05  51.90    3.56   31.99   0.02    14.40    27.51   4.51   0.34</span><br></pre></td></tr></table></figure></p><h2 id="4-查看网络带宽使用率"><a href="#4-查看网络带宽使用率" class="headerlink" title="4. 查看网络带宽使用率"></a>4. 查看网络带宽使用率</h2><p>/proc/net/dev 文件中记录了网络相关的使用情况，其中分别记录了发送和接收的数据包总数、收发的错误包数以及收发的丢失包数等。取单位时间内发送和接收的数据包总包数(totalPackets)，除以网络的基本带宽（bandWidth）:<br>                                  pnet = 100%*totalPackets/bandWidth</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Lance<span class="comment"># cat /proc/net/dev</span></span><br><span class="line">Inter-|   Receive                                                |  Transmit</span><br><span class="line"> face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed</span><br><span class="line">    lo: 2729345   46942    0    0    0     0          0         0  2729345   46942    0    0    0     0       0          0</span><br><span class="line">enp2s0: 558026941  723202    0 11733    0     0          0    105753 23827630  275738    0    0    0     0       0          0</span><br></pre></td></tr></table></figure><pre><code>bytes: 接口发送或接收的总字节数packets: 接口发送或接收的总数据包数errs: 有设备驱动程序检测到的发送或者接收错误的总数drop: 设备驱动程序丢弃的数据包总数fifo: FIFO 缓冲区错误的数量frame: 分组帧错误的数量colls: 接口上检测到的冲突数compressed: 设备驱动程序发送或接收的压缩数据包数carrier: 由设备驱动程序检测到的载波损耗的数量multicast: 设备驱动程序发送或接收的多播帧数</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于一个 Linux 服务器来说，cpu 的主频以及占用率，内存的大小以及占用率，磁盘 I/O 速率和网卡 I/O 速率极大地影响着服务器的性能。在 Linux 系统下，开发者提供了/proc 文件系统来提供系统相关的进程信息&lt;/p&gt;
&lt;h2 id=&quot;1-查看-cpu-主频
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="Linux" scheme="http://www.drelang.cn/tags/Linux/"/>
    
      <category term="Cpu" scheme="http://www.drelang.cn/tags/Cpu/"/>
    
      <category term="Mem" scheme="http://www.drelang.cn/tags/Mem/"/>
    
      <category term="Disk" scheme="http://www.drelang.cn/tags/Disk/"/>
    
      <category term="Network" scheme="http://www.drelang.cn/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 从源码编译并安装 Nginx</title>
    <link href="http://www.drelang.cn/2018/09/12/CentOS%20%E4%BB%8E%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%B9%B6%E5%AE%89%E8%A3%85%20Nginx/"/>
    <id>http://www.drelang.cn/2018/09/12/CentOS 从源码编译并安装 Nginx/</id>
    <published>2018-09-11T16:00:00.000Z</published>
    <updated>2018-12-20T08:15:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux-系统要求"><a href="#Linux-系统要求" class="headerlink" title="Linux 系统要求"></a>Linux 系统要求</h2><p>Nginx 在 Linux 操作系统下运行的时候，要想获取高并发能力，要求 Linux 内核必须在 2.6 以上，可通过以下命令查看 Linux 内核版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">2.6.18-128.e15</span><br></pre></td></tr></table></figure></p><h2 id="安装-Nginx-的必备软件"><a href="#安装-Nginx-的必备软件" class="headerlink" title="安装 Nginx 的必备软件"></a>安装 Nginx 的必备软件</h2><p>通过以下命令安装使用 Nginx 必备的软件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update</span><br><span class="line">$ sudo yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></p><p>其中：</p><ol><li>gcc 和 gcc-c++ 为 c/c++ 编译器</li><li>PCRE 即 Perl 兼容正则表达式，如果我们在 nginx.conf 中使用到了正则表达式，那么必须在编译时将 pcre 库编译进 Nginx。pcre-devel 是使用 PCRE 做二次开发时所需要的开发库，包括头文件，这也是编译时所必需的。</li><li>lib 库用于对 HTTP 包的内容做 gzip 格式的压缩。zlib-devel 是二次开发所需要的库。</li><li>open-ssl 用来支持 SSL。<h2 id="编译与安装"><a href="#编译与安装" class="headerlink" title="编译与安装"></a>编译与安装</h2>从 Nginx 官网  <a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">https://nginx.org/en/download.html</a> 下载最新的 Nginx 源码，放在任意目录下，然后解压<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xf nginx-1.xx.0.tar.gz</span><br></pre></td></tr></table></figure></li></ol><p>进入解压后文件夹，执行以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make </span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></p><p>其中，./configure 用来生成 make 所必须的一些文件。Nginx 安装完成后的目录默认在 /usr/local/nginx 。</p><h2 id="优化-Linux-内核参数"><a href="#优化-Linux-内核参数" class="headerlink" title="优化 Linux 内核参数"></a>优化 Linux 内核参数</h2><p>默认的 Linux　内核参数不符合用于支持高并发访问的 web 服务器的定义，因此需要优化内核参数，需要修改 /etc/sysctl.conf 文件，常用配置如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fs.file-max = 999999              # 进程可以同时打开的最大句柄数，直接限制最大并发连接数</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1         # １表示允许将　TIME-WAIT 状态的 socket 重新用于新的 TCP 链接</span><br><span class="line">net.ipv4.tcp_keepalive_time = 600 # 启用 keepalive 时，TCP 发送 keepalive 消息的频度</span><br><span class="line">net.ipv4.tcp_fin_timeout 30       # 服务器主动关闭连接时，socket 保持在 FIN-WAIT-2 状态的时间 </span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000          # TIME-WAIT 套接字数量的最大值</span><br><span class="line">net.ipv4.ip_local_port_range = 1024  61000  # UDP 和 TCP 连接中本地端口取值范围</span><br><span class="line">net.ipv4.tcp_rmem = 4096 32768 262142       # TCP 接收缓存的最小值，默认值，最大值</span><br><span class="line">net.ipv4.tcp_wmem = 4096 32768 262142       # TCP 发送缓存的最小值，默认值，最大值</span><br><span class="line">net.core.netdev_max_backlog = 8096          # 当网卡接收数据包的速度大于内核处理速度时，会有一个队列保存这些数据包，该参数表示该队列的最大值</span><br><span class="line">net.core.rmem_default = 262144    # 内核套接字接收缓存区默认的大小</span><br><span class="line">net.core.wmem_default = 262144    # 内核套接字发送缓存区默认的大小</span><br><span class="line">net.core.rmem_max = 2097152       # 内核套接字接收缓存区的最大大小</span><br><span class="line">net.core.wmem_max = 2097152       # 内核套接字发送缓存区的最大大小</span><br><span class="line">net.tcp_syncookies = 1            # 该参数与性能无关，用于解决 TCP 的 SYN 攻击 </span><br><span class="line">net.tcp_max_syn.backlog = 1024    # TCP 三次握手接收 SYN 请求队列的最大长度</span><br></pre></td></tr></table></figure></p><p>然后执行 sysctl -p 即可使上述命令生效。</p><p>参考书籍：《深入理解 Nginx：模块开发与架构解析》第二版。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux-系统要求&quot;&gt;&lt;a href=&quot;#Linux-系统要求&quot; class=&quot;headerlink&quot; title=&quot;Linux 系统要求&quot;&gt;&lt;/a&gt;Linux 系统要求&lt;/h2&gt;&lt;p&gt;Nginx 在 Linux 操作系统下运行的时候，要想获取高并发能力，要求 
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="Nginx" scheme="http://www.drelang.cn/tags/Nginx/"/>
    
      <category term="CentOS" scheme="http://www.drelang.cn/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04 引导修复（boot-repair）</title>
    <link href="http://www.drelang.cn/2018/09/11/Ubuntu%2016.04%20%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D%EF%BC%88boot-repair%EF%BC%89/"/>
    <id>http://www.drelang.cn/2018/09/11/Ubuntu 16.04 引导修复（boot-repair）/</id>
    <published>2018-09-10T16:00:00.000Z</published>
    <updated>2018-12-20T07:43:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文转载自：<a href="https://blog.csdn.net/laocaibcc229/article/details/79274412" target="_blank" rel="noopener">https://blog.csdn.net/laocaibcc229/article/details/79274412</a></p><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>在win10的基础上安装了ubuntu16.04，但是后来重新安装了win10，导致ubuntu的引导消失。查找了多种方法，包括easyBCD，rEFind与bootice等，都没有成功，最终用U盘启动盘进行修复，解决了这个问题。</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>1.制作一个U盘启动盘。下载对应的ubuntu系统，用UltraISO制作Ubuntu U盘启动。</p><p>2.打开电脑后选择u盘启动盘，然后选择try ubuntu without install。试用不安装。</p><p>3.进入ubuntu系统后，连接好网络，打开终端，输入下面命令，按照提示操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:yannubuntu/boot-repair &amp;&amp; sudo apt-get update</span><br></pre></td></tr></table></figure></p><p>4.完成后，终端中输入下面命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y boot-repair &amp;&amp; boot-repair</span><br></pre></td></tr></table></figure></p><p>会出现如下界面，选择recommended repair</p><p><img src="./images/boot-repair-1.png" alt="boot-repair-1"></p><p>5.按照boot repair提示的操作进行，完成后重启电脑即可完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文转载自：&lt;a href=&quot;https://blog.csdn.net/laocaibcc229/article/details/79274412&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/laocaibc
      
    
    </summary>
    
      <category term="折腾" scheme="http://www.drelang.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="转载" scheme="http://www.drelang.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>加权法排序二值序列所记录的对象集</title>
    <link href="http://www.drelang.cn/2018/09/08/%E5%8A%A0%E6%9D%83%E6%B3%95%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%80%BC%E5%BA%8F%E5%88%97%E6%89%80%E8%AE%B0%E5%BD%95%E7%9A%84%E5%AF%B9%E8%B1%A1%E9%9B%86/"/>
    <id>http://www.drelang.cn/2018/09/08/加权法排序二值序列所记录的对象集/</id>
    <published>2018-09-07T16:00:00.000Z</published>
    <updated>2018-12-20T07:30:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一串 6 位 0-1 序列， 如 ‘111111’，该序列记录着集合内 A, B, C, D 四个元素的大小。其中每一个比特的含义如下：</p><p>第 1 位，表示 A 与 B 的大小关系，为 0 表示 A&lt;B， 为 1 表示 A&gt;B;</p><p>第 2 位，表示 B 与 C 的大小关系，为 0 表示 B&lt;C， 为 1 表示 B&gt;C;</p><p>第 3 位，表示 C 与 D 的大小关系，为 0 表示 C&lt;D， 为 1 表示 C&gt;D;</p><p>第 4 位，表示 A 与 C 的大小关系，为 0 表示 A&lt;C， 为 1 表示 A&gt;C;</p><p>第 5 位，表示 B 与 D 的大小关系，为 0 表示 B&lt;D， 为 1 表示 B&gt;D;</p><p>第 6 位，表示 A 与 D 的大小关系，为 0 表示 A&lt;D， 为 1 表示 A&gt;D;</p><p>根据给定的 0-1 序列，将 A, B, C, D 四个对象按升序排列。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>可以使用加权法，四个对象的初始权重都赋值为 0，依次判断序列中的每一位值，根据值来给相应的较大对象加权。例如，对于序列 ‘111111’，第 1 位为 1，则对象 B 权重加 1，第 2 位为 1， 则对象 C 权重加 1；以此类推；最后对象 A, B, C, D 的权重分别为 0, 1, 2, 3 ， 根据这个权重就可以给四个对象排序了！</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> tags[<span class="number">6</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">&#123; <span class="number">0</span>, <span class="number">1</span> &#125;,</span><br><span class="line">&#123; <span class="number">1</span>, <span class="number">2</span> &#125;,</span><br><span class="line">&#123; <span class="number">2</span>, <span class="number">3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0</span>, <span class="number">2</span> &#125;,</span><br><span class="line">&#123; <span class="number">1</span>, <span class="number">3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0</span>, <span class="number">3</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">sort</span><span class="params">(<span class="keyword">char</span> *series, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *data; <span class="comment">// tmpser 用来记录 A,B,C,D 四个对象的权重，初始权重都为 0</span></span><br><span class="line"><span class="keyword">char</span> tmpser[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(series[i] == <span class="number">0</span>)</span><br><span class="line">tmpser[tags[i][<span class="number">1</span>]]++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">tmpser[tags[i][<span class="number">0</span>]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">4</span>);</span><br><span class="line">data[tmpser[<span class="number">0</span>]] = <span class="string">'A'</span>;</span><br><span class="line">data[tmpser[<span class="number">1</span>]] = <span class="string">'B'</span>;</span><br><span class="line">data[tmpser[<span class="number">2</span>]] = <span class="string">'C'</span>;</span><br><span class="line">data[tmpser[<span class="number">3</span>]] = <span class="string">'D'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> series[<span class="number">6</span>] = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ,<span class="number">1</span> ,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> *data, i;</span><br><span class="line">data = sort(series, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p>D C B A</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一串 6 位 0-1 序列， 如 ‘111111’，该序列记录着集合内 A, B, C, D 四个元素的大小。其中每一个比特的含义如下：
      
    
    </summary>
    
      <category term="算法" scheme="http://www.drelang.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序算法" scheme="http://www.drelang.cn/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
      <category term="加权法" scheme="http://www.drelang.cn/tags/%E5%8A%A0%E6%9D%83%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Nginx + Yii2 配置</title>
    <link href="http://www.drelang.cn/2018/07/20/Nginx%20+%20Yii2%20%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.drelang.cn/2018/07/20/Nginx + Yii2 配置/</id>
    <published>2018-07-19T16:00:00.000Z</published>
    <updated>2018-12-20T08:23:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前写的一个 yii2 应用一直跑在 apache2 上，最近做压测发现 apache2 的并发处理能力的确差了点，于是想到将应用转移到 nginx 上，以下记录整个迁移过程。</p><h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><p>由于本人用的是 ubuntu16.04 ，只要使用以下命令就能快速安装 nginx 了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx -y</span><br></pre></td></tr></table></figure></p><p>由于之前本机安装了 apache2，如果在安装的时候报了一大堆错误，那么很有可能是在运行的 apache2 影响到了安装过程，此时需要先停止 apache2 ，可通过以下命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 stop</span><br></pre></td></tr></table></figure></p><p>nginx 成功安装后，相关的配置目录在 /etc/nginx 。可以通过以下命令来启动 nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/nginx start</span><br></pre></td></tr></table></figure></p><p>此时访问本地 80 端口即可看到 nginx 欢迎页面。</p><h2 id="php7-0-fpm-与-nginx"><a href="#php7-0-fpm-与-nginx" class="headerlink" title="php7.0-fpm 与 nginx"></a>php7.0-fpm 与 nginx</h2><p>nginx 与 php-fpm 通信有两种方式，一种是通过 TCP，另外一种是 unix socket 。据说两者在一般情况下没有太大差异，但是在高并发情况下，unix socket 方式性能要优异一些。修改/etc/php/7.0/pool.d/<a href="http://www.conf" target="_blank" rel="noopener">www.conf</a> 相应内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen = /run/php/php7.0-fpm.sock</span><br></pre></td></tr></table></figure></p><p>因此，在 nginx 的配置文件中就必须要使用相应的方式，配置如下<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">886</span> default_server;</span><br><span class="line"><span class="attribute">listen</span> [::]:<span class="number">886</span> default_server;</span><br><span class="line"></span><br><span class="line"><span class="attribute">root</span> /Myweb/yii2/web;</span><br><span class="line"><span class="attribute">index</span> index.php index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line"><span class="comment"># rewrite route</span></span><br><span class="line"><span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">   <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> /index.php <span class="literal">last</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">server_name</span> _;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line"><span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line"><span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line"><span class="comment"># include snippets/fastcgi-php.conf;</span></span><br><span class="line"><span class="attribute">fastcgi_pass</span> unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">        <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上配置，监听 886 端口，服务器根目录为 /Myweb/yii2/web ，对应 yii2 的入口。 fastcgi_pass unix: /run/php/php7.0-fpm.sock 表示使用 unix socket 方式与 php-fpm 通信。 include 的根目录为 /etc/nginx/。</p><h2 id="开启-nginx-的路由重写"><a href="#开启-nginx-的路由重写" class="headerlink" title="开启 nginx 的路由重写"></a>开启 nginx 的路由重写</h2><p>以上配置文件中，如下几行起到了开启路由重写的作用。之前看到很多博文说要另写文件去开启路由重写，后来才发现只要在 sever 配置内写入重写规则即可，没必要另外再新建重写文件。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">   <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> /index.php <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  rewrite 是路由重写的指令，根据正则表达式的内容，重定向到replacement，结尾是flag标记。</p><p> rewrite    <regex>    <replacement>    [flag];</replacement></regex></p><p> 关键字      正则        替代内容          flag标记</p><p>具体的可参考其他博客。</p><p>参考链接：</p><p><a href="https://hideonbushtut.github.io/2017/01/27/%E6%80%BB%E7%BB%93Ubuntu%E4%B8%8B%E9%83%A8%E7%BD%B2LNMP%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">总结Ubuntu下部署LNMP环境</a></p><p><a href="https://www.cnblogs.com/quwaner/p/8193186.html" target="_blank" rel="noopener">Nginx URL重写（rewrite）配置及信息详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前写的一个 yii2 应用一直跑在 apache2 上，最近做压测发现 apache2 的并发处理能力的确差了点，于是想到将应用转移到 nginx 上，以下记录整个迁移过程。&lt;/p&gt;
&lt;h2 id=&quot;安装-nginx&quot;&gt;&lt;a href=&quot;#安装-nginx&quot; class=
      
    
    </summary>
    
      <category term="Web" scheme="http://www.drelang.cn/categories/Web/"/>
    
    
      <category term="Nginx" scheme="http://www.drelang.cn/tags/Nginx/"/>
    
      <category term="Yii2" scheme="http://www.drelang.cn/tags/Yii2/"/>
    
      <category term="Nginx路由重写" scheme="http://www.drelang.cn/tags/Nginx%E8%B7%AF%E7%94%B1%E9%87%8D%E5%86%99/"/>
    
  </entry>
  
</feed>
