<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[frp 做内网穿透]]></title>
    <url>%2F2019%2F08%2F22%2Ffrp%20%E5%81%9A%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%2F</url>
    <content type="text"><![CDATA[使用场景最近有个需求，需要把运行在内网的 web 服务暴露到公网，使得用户通过公网就可以访问到该 web 服务，这是一个典型的内网穿透场景。经过一番搜索，发现 frp 工具还挺好用的。frp 官网地址如下：https://github.com/fatedier/frp。 通过 frp 做内网穿透要想将内网服务暴露到公网，必须借助 VPS 才行，可以租用一个云服务器。在 VPS 和内网服务机器上下载对应平台最新版本的 frp 压缩包，解压可以得到可执行文件 frps 和 frpc，以及配置文件 frps.ini 和 frpc.ini。 运行 frps 服务在VPS上修改配置文件 frps.ini，如下：123456[common]bind_port = 7000token = passw0rddashboard_port = 7500dashboard_user = admindashboard_pwd = pass 以上命令解释：12345bind_port = 7000 // frps服务对外服务端口为7000，frpc需要连接到该VPS的7000端口才能使用frps服务token = passw0rd // frpc 连接 frps 需要使用该 token，不然 frps 拒绝服务dashboard_port = 7500 // 开启 frps 的管理面板，浏览器访问 VPS 的 IP 和 7500 端口，然后输入下方的账号和密码即可管理dashboard_user = admin // 管理面板账号名dashboard_pwd = pass // 管理面板密码 然后在命令行运行如下命令即可挂起 fprs 服务。1./frps -c ./frps.ini 运行 frpc 服务在内网服务机器上，修改 frpc.ini，如下：123456789101112131415[common]server_addr = xxx.xxx.xxx.xxxserver_port = 7000token = passw0rdadmin_addr = 127.0.0.1admin_port = 7400admin_user = adminadmin_pwd = pass[web]type=tcplocal_ip = 127.0.0.1local_port = 8080remote_port = 8080 以上命令解释：1234567891011121314server_addr = xxx.xxx.xxx.xxx // VPS 的 IP 地址server_port = 700 // VPS 运行 frps 服务的端口token = passw0rd // 连接 frps 服务需要用到的 tokenadmin_addr = 127.0.0.1 // 本地管理界面 IPadmin_port = 7400 // 本地管理界面端口admin_user = admin // 本地管理界面用户账号admin_pwd = pass // 本地管理界面用户密码[web] // 本地要暴露的服务名称type = tcp // 本地要暴露的服务类型local_ip = 127.0.0.1 // 本地要暴露的服务的 IPlocal_port = 8080 // 本地要暴露的服务的端口。比如说本地运行了一个 tomcat 服务，服务端口为 8080remote_port = 8080 // 希望使用 frps 所在的 VPS 的端口，不一定需要与 local_port 保持一致 在命令行上运行以下命令即可：1./frpc -c ./frpc.ini 总结通过上面配置好 frps 和 frpc 后，就可以通过 VPS 的 8080 端口访问内网的 8080 端口运行的服务。]]></content>
      <categories>
        <category>捣鼓</category>
      </categories>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次使用 samba 服务遇到的坑]]></title>
    <url>%2F2019%2F03%2F28%2F%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%20samba%20%E6%9C%8D%E5%8A%A1%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[环境服务端：Ubuntu 18.04客户端：Windows 10 17134 1.安装 smb server12sudo apt updatesudo apt install samba 修改配置文件，文件末尾添加如下几行：12345[sambashare] comment = Samba on Ubuntu path = /home/username/sambashare read only = no browsable = yes 重启 smbd 服务：1sudo systemctl restart smbd.service 设置访问密码1sudo smbpasswd -a &lt;username&gt; 注意：username 为系统中存在的用户名 2.windows client 访问 smb server正常情况下，直接在文件管理的地址栏输入ip和共享文件夹名就行，如1\\ip-address\sambashare 注意：其中的 “sambashare” 为服务器配置文件中的中括号里面的名字，而不是服务器实际共享的文件夹名！ 如果遇到 windows 主机不能访问服务器共享文件夹的情况，请看以下解决方法。总结一下就是，建立如下 .reg 脚本，然后双击运行就可以：1234Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters]&quot;AllowInsecureGuestAuth&quot;=dword:00000001 参考连接1.install-and-configure-samba2.windows 10 0x80070035 找不到网络路径]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>samba</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 Docker 搭建局域网 Gitlab 服务]]></title>
    <url>%2F2018%2F12%2F20%2F%E5%9F%BA%E4%BA%8E%20Docker%20%E6%90%AD%E5%BB%BA%E5%B1%80%E5%9F%9F%E7%BD%91%20Gitlab%20%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[环境说明操作系统：Ubuntu 18.04 Docker Server 版本：18.09.0 安装 docker-ce 安装必要的软件包 12sudo apt-get updatesudo apt-get install apt-transport-https ca-certificates curl software-properties-common 添加软件源的 GPG 密钥 12curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add- 向 source.list 中添加 Docker 软件源 1234sudo add-apt-repository \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \$(lsb_release -cs) \stable" 安装 docker-ce 12sudo apt updatesudo apt install docker-ce 启动 docker 守护进程,并开机自动启动 12sudo systemctl start dockersudo systemctl enable docker 将当前用户加入 docker 组，然后注销重新登录 1sudo usermod -aG docker $USER 测试 docker 是否正确安装 1docker run hello-world 参考：Docker-从入门到实践 运行 gitlab-ce 的 docker 镜像 下载最新的 gitlab-ce 镜像 1docker pull gitlab/gitlab-ce:latest 安装 docker-compose 1sudo apt install docker-compose 编写 docker-compose.yml 文件 12345678910111213141516171819version: '3'services: gitlab: image: gitlab/gitlab-ce:latest hostname: '&lt;ip&gt;' environment: GITLAB_OMNIBUS_CONFIG: | external_url 'https://&lt;ip&gt;:30443' gitlab_rails['gitlab_shell_ssh_port'] = 30022 ports: - '80:80' - '30443:443' - '30022:22' volumes: - ./config:/etc/gitlab - ./logs:/var/log/gitlab - ./data:/var/opt/gitlab restart: always 配置说明： 主机 80 端口直接映射到容器 80 端口。 主机 30443 端口映射到容器 443 端口。 主机 30022 端口映射到容器 22 端口，为了能够使用 gitlab 的 ssh 功能。 主机 config 文件夹保留容器内 gitlab 的配置。 主机 logs 文件夹保留容器内 gitlab 运行日志。 主机 data 文件夹保留容器内 gitlab 的运行数据，如用户上传文件等。 参考：GitLab Docs通过 docker 搭建自用的 gitlab 服务]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot 学习资源]]></title>
    <url>%2F2018%2F11%2F22%2FSpring%20Boot%20%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%2F</url>
    <content type="text"><![CDATA[1. 入门书籍《Spring Boot 实战》：这本书上的代码跟官网上给的代码有些不一样，而且官网上给的代码还不一定能运行。大致浏览一遍该书，了解 Spring Boot 的一些关键概念倒是可以。 2. 官方 GuidesBuilding a RESTful Web ServiceSpring Boot with DockerAccessing data with MySQLSecuring a Web Application除了上面这些经常会用到的之外，这些链接的网站下面还有更多的 Guides ，涉及到数据库，RESTful 服务，API 文档生成 等等。 3. 官方 SamplesSagan spring.io 官网的源码！Initializr 创建 spring boot 项目的工具。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker 资源整理]]></title>
    <url>%2F2018%2F10%2F21%2FDocker%20%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[1. 学习资源Docker 从入门到实践 docker-cheat-sheet http://search.dangdang.com/?key=docker%BC%BC%CA%F5%C8%EB%C3%C5%D3%EB%CA%B5%D5%BD%20%B5%DA3%B0%E6&amp;act=input 2. Docker GUI 工具DockStation 3. 官方文档https://docs.docker.com/https://docs.docker.com/compose/]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 忽略文件夹下的文件，但是保留空文件夹]]></title>
    <url>%2F2018%2F10%2F21%2FGit%20%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BF%9D%E7%95%99%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A4%B9%2F</url>
    <content type="text"><![CDATA[最近在做项目发现，想用 git 忽略掉所有日志文件，但是发现那样也会忽略掉日志文件夹，这样显得项目的结构不够完整，于是找到如下解决方法. 假设项目文件夹结构如下：12345678910+-- smartlock +-- conf | +-- nginx.conf | +-- mime.types | +-- fastcgi.conf +-- logs +-- html | +-- css | +-- js | +-- images 想要忽略掉 logs 文件夹下所有的日志文件，但是想保留 logs 文件夹以保持项目文件夹结构的完整性。可以在 logs 文件夹里新建 .gitignore 文件，文件内容如下：123# ignore all except .gitignore file*!.gitignore 然后 git add . ，就可以将 logs 文件夹添加进 git 缓存了。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推送镜像到 Docker Hub]]></title>
    <url>%2F2018%2F10%2F21%2F%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F%E5%88%B0%20Docker%20Hub%2F</url>
    <content type="text"><![CDATA[1. 登录 Docker Hub1docker login 根据提示，输入注册 docker hub 时的用户名和密码 2. 重新 tag 镜像推送命令为1docker push 注册用户名/镜像名 因此要把将推送的镜像规范命名，如下所示，格式为： 注册用户名/镜像名:版本号1docker tag &lt;IMAGE_NAME&gt; drelang/smartlock:v1 重命名的镜像不会重新占用物理空间，只是在原有的镜像上再打一个标签。 3. 推送到 Docker Hub1docker push drelang/smartlock:v1]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Docker Hub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[理解 Nginx 下的 fastcgi.conf 文件]]></title>
    <url>%2F2018%2F10%2F21%2F%E7%90%86%E8%A7%A3%20Nginx%20%E4%B8%8B%E7%9A%84%20fastcgi.conf%20%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[最近用 docker 来搭建 nginx + php-fpm 服务器，参考网上的教程后发现了一个不太明白的地方。Docker-compose.yml 文件如下：1234567891011121314151617version: '3'services: openresty: image: openresty/openresty:alpine network_mode: "host" volumes: - ./:/home command: openresty -p /home -c conf/nginx.conf -g "daemon off;" restart: always php73-fpm: image: php:7.3-rc-fpm-alpine network_mode: "host" volumes: - ./:/home restart: always 疑惑点：php73-fpm 容器下必须挂载 openresty 挂载过的文件卷？ 带着疑问，在 google 上找到了答案。 Nginx 与 php-fpm 通信过程是通过 nginx 的 fastcgi 模块来处理的，即 fastcgi 模块将来自客户端的关于 php 文件的请求转发给 php-fpm 来处理。既然是转发请求，那么必须要遵循一定的协议，也就是 fastcgi.conf 所规定的协议了。 nginx.conf 中配置处理 php 文件的 location 规则如下：123456789server &#123; listen 80; location ~ \.php$ &#123; root /home/php; fastcgi_pass 127.0.0.1:9000; include fastcgi.conf; &#125;&#125; fastcgi.conf 文件内容如下：12345678910111213141516171819202122232425fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;fastcgi_param QUERY_STRING $query_string;fastcgi_param REQUEST_METHOD $request_method;fastcgi_param CONTENT_TYPE $content_type;fastcgi_param CONTENT_LENGTH $content_length;fastcgi_param SCRIPT_NAME $fastcgi_script_name;fastcgi_param REQUEST_URI $request_uri;fastcgi_param DOCUMENT_URI $document_uri;fastcgi_param DOCUMENT_ROOT $document_root;fastcgi_param SERVER_PROTOCOL $server_protocol;fastcgi_param REQUEST_SCHEME $scheme;fastcgi_param HTTPS $https if_not_empty;fastcgi_param GATEWAY_INTERFACE CGI/1.1;fastcgi_param SERVER_SOFTWARE nginx/$nginx_version;fastcgi_param REMOTE_ADDR $remote_addr;fastcgi_param REMOTE_PORT $remote_port;fastcgi_param SERVER_ADDR $server_addr;fastcgi_param SERVER_PORT $server_port;fastcgi_param SERVER_NAME $server_name;# PHP only, required if PHP was built with --enable-force-cgi-redirectfastcgi_param REDIRECT_STATUS 200; 其中，fastcgi_param指令指定放置PHP动态程序的主目录，也就是$fastcgi_script_name前面指定的路径，此处就是 /home/php。也就是说客户端请求 /home/php/xxx.php 文件， nginx 不能解析该文件，于是按照 fastcgi.conf 规定的规则将该请求转发给 php-fpm，其中规则指明了 php-fpm 到哪里去寻找 php 文件！ 再回到前面的那个 docker 疑惑点，也就能明白为何要在 php-fpm 容器里挂载文件卷了，不然 php-fpm 容器找不到客户端要请求的 php 文件。 参考博客： Dockerise your PHP application with Nginx and PHP7-FPM Nginx+Php-fpm运行原理详解 FastCGI模块（FastCGI） PHP-FastCGI详解 深入理解Zend SAPIs(Zend SAPI Internals)]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 开启防火墙/开启端口]]></title>
    <url>%2F2018%2F10%2F18%2FUbuntu%20%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[1. 查看本地端口开启情况123456789➜ ~ sudo ufw status状态： 激活至 动作 来自- -- --80 ALLOW Anywhere 8001 ALLOW Anywhere 80 (v6) ALLOW Anywhere (v6) 8001 (v6) ALLOW Anywhere (v6) 开启防火墙的状态下，只有系统允许的端口才能被其他主机访问。 2. 关闭防火墙1234➜ ~ sudo ufw disable防火墙在系统启动时自动禁用➜ ~ sudo ufw status状态：不活动 3. 开启防火墙，允许访问特定端口12345678910111213141516➜ ~ sudo ufw enable 在系统启动时启用和激活防火墙➜ ~ sudo ufw allow 81规则已添加规则已添加 (v6)➜ ~ sudo ufw status状态： 激活至 动作 来自- -- --80 ALLOW Anywhere 8001 ALLOW Anywhere 81 ALLOW Anywhere 80 (v6) ALLOW Anywhere (v6) 8001 (v6) ALLOW Anywhere (v6) 81 (v6) ALLOW Anywhere (v6) 4. 不允许访问特定端口1234567891011121314➜ ~ sudo ufw deny 81规则已更新规则已更新 (v6)➜ ~ sudo ufw status状态： 激活至 动作 来自- -- --80 ALLOW Anywhere 8001 ALLOW Anywhere 81 DENY Anywhere 80 (v6) ALLOW Anywhere (v6) 8001 (v6) ALLOW Anywhere (v6) 81 (v6) DENY Anywhere (v6)]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>ufw</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu18.04 安装 sublime-text-3，并支持中文输入]]></title>
    <url>%2F2018%2F10%2F16%2FUbuntu18.04%20%E5%AE%89%E8%A3%85%20sublime-text-3%EF%BC%8C%E5%B9%B6%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%2F</url>
    <content type="text"><![CDATA[安装 sublime-text-3sublime 官网推荐添加 apt-get 源来在线安装，但是不知道为啥，电脑一直添加不了安装源，于是放弃。然而，官网提供的压缩包，也下载不了，也因此放弃。最后，找到了一个可靠的压缩包来源 https://www.techspot.com/downloads/5546-sublime-text.html 下载压缩包后，将压缩包放到 /opt 文件夹下，然后解压命令如下：1sudo tar -jxvf sublime_text_3_build_3176_x64.tar.bz2 解压后得到文件夹 sublime_text_3，注意此时的解压文件，因为后面会用到。此时，做一个软链接，就可以在命令行启动 sublime 了，软链接命令如下:1sudo ln -s /opt/sublime_text_3/sublime_text /usr/bin/subl 支持中文输入Github 有人整理了解决让 sublime 支持中文输入的问题，源码地址如下：https://github.com/lyfeyaj/sublime-text-imfix 按照提示，直接一条 ./sublime-imfix 命令即可修复问题，但是由于我是从源码安装的 sublime，因此要修改 src/subl 文件才行。 原文件内容如下所示:1234#!/bin/shexport LD_PRELOAD=/opt/sublime_text/libsublime-imfix.soexec /opt/sublime_text/sublime_text "$@" 改成如下内容即可，主要是第四行的路径，让 shell 脚本找到 sublime 可执行文件即可1234#!/bin/shexport LD_PRELOAD=/opt/sublime_text/libsublime-imfix.soexec /opt/sublime_text/sublime_text_3/sublime_text "$@" 最后，别忘记将系统的输入法改成 fcitx !!!]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>Sublime-text-3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 无法添加文件夹下的文件]]></title>
    <url>%2F2018%2F10%2F15%2FGit%20%E6%97%A0%E6%B3%95%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[无论使用啥命令，都无法将文件夹下的某些文件添加进 Git 进行版本控制，Git 提示信息如下：123456尚未暂存以备提交的变更： （使用 "git add &lt;文件&gt;..." 更新要提交的内容） （使用 "git checkout -- &lt;文件&gt;..." 丢弃工作区的改动） （提交或丢弃子模组中未跟踪或修改的内容） 修改： php/getui (修改的内容, 未跟踪的内容) 后来经过艰难的搜索，终于发现原来是子文件夹下面含有 .git 文件夹，因此导致该子文件夹无法被 Git 跟踪，可以通过以下方法解决：12git rm --cached foldergit add folder 其中 folder 为子文件夹。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql插入数据已经存在，则执行update更新]]></title>
    <url>%2F2018%2F10%2F14%2Fsql%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%88%99%E6%89%A7%E8%A1%8Cupdate%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[原文地址：http://www.111cn.net/database/mysql/76509.htm 总结下，最好用的语法应该如下：1replace into testtb(id,name,age)values(1,"aa",12); 其中 testtb 为表名，id为主键，一定要设置主键。如果上述记录不存在，则插入该条新纪录；如果上述记录存在，则更新该记录.]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL 5.7 添加用户，授权，删除用户]]></title>
    <url>%2F2018%2F10%2F10%2FMySQL%205.7%20%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%EF%BC%8C%E6%8E%88%E6%9D%83%EF%BC%8C%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7%2F</url>
    <content type="text"><![CDATA[添加用户12use mysql;create user &apos;&lt;USERNAME&gt;&apos;@&apos;&lt;HOST&gt;&apos; identified by &apos;&lt;PASSWORD&gt;&apos;; USERNAME：为登录 mysql 的用户名。HOST：为登录 mysql 的主机地址。如 HOST=localhost 时，只能本地访问；HOST=% 时，任何主机都可以访问，但是要修改文件 /etc/mysql/mysql.conf.d/mysqld.cnf ，注释掉 bind-address = 127.0.0.1；若要指定一定网段的 HOST，则可以将网段设置如下: HOST=192.168.8.% 。PASSWORD：用 USERNAME 指定的用户的登录密码。 授权12create database &lt;DATABASE_NAME&gt; default charset utf8mb4 collate utf8mb4_general_ci;grant all privileges on &lt;DATABASE_NAME&gt;.* to '&lt;USERNAME&gt;'@'&lt;HOST&gt;' identified by '&lt;PASSWORD&gt;'; 以上命令先创建了一个名为 DATABASE_NAME 的数据库，字符集为 utf8。然后将所有权限授予了主机地址为 HOST，用户名为 USERNAME，密码为 PASSWORD 的用户。 删除数据库、用户12drop database &lt;DATABASE_NAME&gt;; -- 删除数据库drop user '&lt;USERNAME&gt;'@'&lt;HOST&gt;'; -- 删除用户 查看数据库所有用户、主机地址和密码12use mysql;select user,host,authentication_string from user; 执行 SQL 文件1source /path/to/sql_file]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx lua/openresty 相关资源整理]]></title>
    <url>%2F2018%2F10%2F10%2Fnginx%20luaopenresty%20%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[Lua 包管理工具：Lua的包管理工具为 luarocks，在官网 https://luarocks.org/ 可以找到各种有用的 lua 包。 openresty 手册：https://www.nginx.com/resources/wiki/modules/lua/ 一些有质量的 openresty 的库和资源：参看 Github 上别人的整理 https://github.com/bungle/awesome-resty#authentication-and-authorization ##相关书籍： 《深入理解 Nginx：模块开发与架构解析》第二版，陶辉 著。 《Nginx Lua 开发实战》，李明江 著。 持续更新。。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Lua</tag>
        <tag>Openresty</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[openresty1.13 与 nginx+php7.0-fpm 压测对比]]></title>
    <url>%2F2018%2F09%2F27%2Fopenresty1.13%20%E4%B8%8E%20nginx%2Bphp7.0-fpm%20%E5%8E%8B%E6%B5%8B%E5%AF%B9%E6%AF%94%2F</url>
    <content type="text"><![CDATA[为了验证下 openresty 官网所说的比 nginx+php-fpm 的吞吐量要高，因此做了以下测试，本次测试服务器硬件配置如下: Dell latitude 3330 CPU: 4 core Intel(R) Core(TM) i5-3337U CPU @ 1.80GHz MEM: 8GB 本次测试两种架构下，服务器都发送 “Hello,world!” 这一字符串。 1. 100并发，50k请求以下为 openresty 的压测结果12345678910111213141516171819202122232425262728293031323334353637383940414243➜ ~ ab -c 100 -n 50000 -q http://192.168.8.156:8090/This is ApacheBench, Version 2.3 &lt;$Revision: 1706008 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking 192.168.8.156 (be patient).....doneServer Software: openresty/1.13.6.2Server Hostname: 192.168.8.156Server Port: 8090Document Path: /Document Length: 20 bytesConcurrency Level: 100Time taken for tests: 2.743 secondsComplete requests: 50000Failed requests: 0Total transferred: 8400000 bytesHTML transferred: 1000000 bytesRequests per second: 18226.60 [#/sec] (mean)Time per request: 5.486 [ms] (mean)Time per request: 0.055 [ms] (mean, across all concurrent requests)Transfer rate: 2990.30 [Kbytes/sec] receivedConnection Times (ms) min mean[+/-sd] median maxConnect: 1 2 0.6 2 5Processing: 1 3 0.7 3 10Waiting: 1 2 0.6 2 10Total: 4 5 0.5 5 15Percentage of the requests served within a certain time (ms) 50% 5 66% 6 75% 6 80% 6 90% 6 95% 6 98% 6 99% 7 100% 15 (longest request) 以下为 nginx+php7.0-fpm 的压测结果123456789101112131415161718192021222324252627282930313233343536373839404142434445➜ ~ ab -c 100 -n 50000 -q http://192.168.8.156:8080/test.phpThis is ApacheBench, Version 2.3 &lt;$Revision: 1706008 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking 192.168.8.156 (be patient).....doneServer Software: nginx/1.15.3Server Hostname: 192.168.8.156Server Port: 8080Document Path: /test.phpDocument Length: 13 bytesConcurrency Level: 100Time taken for tests: 3.380 secondsComplete requests: 50000Failed requests: 0Total transferred: 7500000 bytesHTML transferred: 650000 bytesRequests per second: 14791.25 [#/sec] (mean)Time per request: 6.761 [ms] (mean)Time per request: 0.068 [ms] (mean, across all concurrent requests)Transfer rate: 2166.69 [Kbytes/sec] receivedConnection Times (ms) min mean[+/-sd] median maxConnect: 0 1 0.6 0 5Processing: 2 6 1.2 6 14Waiting: 1 6 1.3 6 14Total: 4 7 1.1 6 15WARNING: The median and mean for the initial connection time are not within a normal deviation These results are probably not that reliable.Percentage of the requests served within a certain time (ms) 50% 6 66% 7 75% 7 80% 8 90% 8 95% 9 98% 10 99% 11 100% 15 (longest request) 2. 1k并发，50k请求以下为 openresty 的压测结果12345678910111213141516171819202122232425262728293031323334353637383940414243➜ ~ ab -c 1000 -n 50000 -q http://192.168.8.156:8090/ This is ApacheBench, Version 2.3 &lt;$Revision: 1706008 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking 192.168.8.156 (be patient).....doneServer Software: openresty/1.13.6.2Server Hostname: 192.168.8.156Server Port: 8090Document Path: /Document Length: 20 bytesConcurrency Level: 1000Time taken for tests: 3.445 secondsComplete requests: 50000Failed requests: 0Total transferred: 8400000 bytesHTML transferred: 1000000 bytesRequests per second: 14514.61 [#/sec] (mean)Time per request: 68.896 [ms] (mean)Time per request: 0.069 [ms] (mean, across all concurrent requests)Transfer rate: 2381.30 [Kbytes/sec] receivedConnection Times (ms) min mean[+/-sd] median maxConnect: 10 24 22.2 23 1030Processing: 7 35 30.5 33 772Waiting: 5 27 30.7 25 771Total: 27 58 37.1 57 1057Percentage of the requests served within a certain time (ms) 50% 57 66% 60 75% 61 80% 62 90% 63 95% 64 98% 67 99% 75 100% 1057 (longest request) 以下为 nginx+php7.0-fpm 的压测结果123456789101112131415161718192021222324252627282930313233343536373839404142434445➜ ~ ab -c 1000 -n 50000 -q http://192.168.8.156:8080/test.phpThis is ApacheBench, Version 2.3 &lt;$Revision: 1706008 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking 192.168.8.156 (be patient).....doneServer Software: nginx/1.15.3Server Hostname: 192.168.8.156Server Port: 8080Document Path: /test.phpDocument Length: 13 bytesConcurrency Level: 1000Time taken for tests: 5.165 secondsComplete requests: 50000Failed requests: 14407 (Connect: 0, Receive: 0, Length: 14407, Exceptions: 0)Non-2xx responses: 14407Total transferred: 14962826 bytesHTML transferred: 7579767 bytesRequests per second: 9680.80 [#/sec] (mean)Time per request: 103.297 [ms] (mean)Time per request: 0.103 [ms] (mean, across all concurrent requests)Transfer rate: 2829.14 [Kbytes/sec] receivedConnection Times (ms) min mean[+/-sd] median maxConnect: 7 28 114.9 14 1043Processing: 7 34 64.3 23 2021Waiting: 7 31 64.2 20 2021Total: 14 62 133.9 37 3028Percentage of the requests served within a certain time (ms) 50% 37 66% 42 75% 46 80% 48 90% 57 95% 72 98% 387 99% 1034 100% 3028 (longest request) 3. 总结 并发情况 吞吐量 平均完成时间 90%完成时间 c100 n50k 18226.6/14791.25 5/7 6/8 c1k n50k 14514.61/9680.80 58/62 63/57 ​以上数据对比格式为： openresty/nginx+php7.0-fpm 从上面对比情况可以看出，openresty 在并发情况下吞吐量的确要比 nginx+php7.0-fpm 高。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>openresty</tag>
        <tag>nginx</tag>
        <tag>php7.0-fpm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 查看 cpu, mem, disk 和 network 信息]]></title>
    <url>%2F2018%2F09%2F13%2FLinux%20%E6%9F%A5%E7%9C%8B%20cpu%2C%20mem%2C%20disk%20%E5%92%8C%20network%20%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[对于一个 Linux 服务器来说，cpu 的主频以及占用率，内存的大小以及占用率，磁盘 I/O 速率和网卡 I/O 速率极大地影响着服务器的性能。在 Linux 系统下，开发者提供了/proc 文件系统来提供系统相关的进程信息 1.查看 cpu 主频和占用率Linux 下 CPU 的主频有两种获取方式，一种是通过读取 /proc/cpuinfo 文件，另外一种是利用 CPU 主频的计算原理编写程序获取。此处只介绍前一种方式。即使用命令 cat /proc/cpuinfo 。从下方图片可以看到，本人的电脑是双核 CPU，主频都为 2.60GHz。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354Lance# cat /proc/cpuinfoprocessor : 0vendor_id : GenuineIntelcpu family : 6model : 23model name : Pentium(R) Dual-Core CPU E5300 @ 2.60GHzstepping : 10microcode : 0xa0bcpu MHz : 1200.000cache size : 2048 KBphysical id : 0siblings : 2core id : 0cpu cores : 2apicid : 0initial apicid : 0fpu : yesfpu_exception : yescpuid level : 13wp : yesflags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good nopl cpuid aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm xsave lahf_lm pti tpr_shadow vnmi flexpriority dthermbugs : cpu_meltdown spectre_v1 spectre_v2bogomips : 5186.86clflush size : 64cache_alignment : 64address sizes : 36 bits physical, 48 bits virtualpower management:processor : 1vendor_id : GenuineIntelcpu family : 6model : 23model name : Pentium(R) Dual-Core CPU E5300 @ 2.60GHzstepping : 10microcode : 0xa0bcpu MHz : 1200.000cache size : 2048 KBphysical id : 0siblings : 2core id : 1cpu cores : 2apicid : 1initial apicid : 1fpu : yesfpu_exception : yescpuid level : 13wp : yesflags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good nopl cpuid aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm xsave lahf_lm pti tpr_shadow vnmi flexpriority dthermbugs : cpu_meltdown spectre_v1 spectre_v2bogomips : 5186.86clflush size : 64cache_alignment : 64address sizes : 36 bits physical, 48 bits virtualpower management: Linux 下 CPU 的使用状态可分为用户态、系统态以及空闲态。CPU 占用率可以用如下公式计算 CPU占用率 = CPU执行非系统空闲进程时间/CPU执行总时间 /proc/stat 文件对 CPU 的使用情况进行了实时的记录，如下图所示：1234567891011Lance# cat /proc/statcpu 525228 16439 390034 139932703 224352 0 2010 0 0 0cpu0 265224 6822 197250 70017169 60063 0 74 0 0 0cpu1 260004 9617 192784 69915534 164289 0 1936 0 0 0intr 126884204 43 2 0 0 0 0 0 1 0 3 0 0 4 0 0 0 124 0 2 1404563 0 0 0 0 955106 514 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0ctxt 193899569btime 1536131324processes 268172procs_running 1procs_blocked 0softirq 101783843 10 36600014 116255 1002291 1058479 0 263 35993177 0 27013354 其中首行的 10 个参数含义如下： user nice system idle iowait irq softirq steal guest guest_nice user:用户态的CPU时间 nice：低优先级程序所占用的用户态的cpu时间。 system：系统态的CPU时间 idle：CPU空闲的时间 iowait：等待IO响应的时间 irq：处理硬件中断的时间 softirq：处理软中断的时间 steal: 处理其他所花的时间 guest：运行时间为客户操作系统下的虚拟CPU控制 guest_nice：访客的低优先级程序所占用的用户态的cpu时间 余下的参数中： intr: 第一个参数表示的是自系统启动以来，发生的所有中断的次数；其他的数对应一个特定中断发生的次数 ctxt: cpu自系统启动以来发生的上下文交换次数 btime: 系统启动到现在的时间 UTC 秒 processes: 表示系统启动以来创建的进程个数 procs_running: 当前运行进程的个数 procs_blocked: 当前被阻塞的进程个数 softirq: 显示软中断情况 要计算 CPU 在某段时间内的占用率，可以分别记录下 t1 和 t2 时刻的 CPU 总的状态和空闲状态，因此： CPU占用率 = 1 - ( idle2 - idle1 ) / (total2 - total1) 其中 total 表示 10 个参数之和。 2. 查看内存大小及占用率/proc/meminfo 记录了内存信息。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748Lance# cat /proc/meminfoMemTotal: 4003752 kBMemFree: 517464 kBMemAvailable: 3144816 kBBuffers: 257152 kBCached: 2289308 kBSwapCached: 0 kBActive: 1455916 kBInactive: 1487740 kBActive(anon): 277376 kBInactive(anon): 174624 kBActive(file): 1178540 kBInactive(file): 1313116 kBUnevictable: 0 kBMlocked: 0 kBSwapTotal: 6253564 kBSwapFree: 6253564 kBDirty: 8 kBWriteback: 0 kBAnonPages: 395168 kBMapped: 207872 kBShmem: 54808 kBSlab: 460364 kBSReclaimable: 425200 kBSUnreclaim: 35164 kBKernelStack: 5376 kBPageTables: 22064 kBNFS_Unstable: 0 kBBounce: 0 kBWritebackTmp: 0 kBCommitLimit: 8255440 kBCommitted_AS: 2553704 kBVmallocTotal: 34359738367 kBVmallocUsed: 0 kBVmallocChunk: 0 kBHardwareCorrupted: 0 kBAnonHugePages: 2048 kBShmemHugePages: 0 kBShmemPmdMapped: 0 kBCmaTotal: 0 kBCmaFree: 0 kBHugePages_Total: 0HugePages_Free: 0HugePages_Rsvd: 0HugePages_Surp: 0Hugepagesize: 2048 kBDirectMap4k: 113216 kBDirectMap2M: 4044800 kB 其中： MemTotal：表示系统可支配内存 MemAvailable：表示应用程序可用的内存 因此，内存占用率可以用如下公式计算： 3.查看磁盘 I/O占用率安装 sysstat 工具，它的子工具 iostat 可以显示 I/O 占用率。%util 参数表示 1s内用于 I/O 请求所用时间的比例，%util 值越高，I/O 占用率越高，可直接使用这个参数来代表 I/O 占用率1234567891011121314Lance# iostat -xLinux 4.13.0-32-generic (Lance) 2018年09月13日 _x86_64_ (2 CPU)avg-cpu: %user %nice %system %iowait %steal %idle 0.37 0.01 0.28 0.16 0.00 99.17Device r/s w/s rkB/s wkB/s rrqm/s wrqm/s %rrqm %wrqm r_await w_await aqu-sz rareq-sz wareq-sz svctm %utilloop0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 21.41 0.00 0.00 2.44 0.00 20.89 0.00loop1 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 44.62 0.00 0.00 1.69 0.00 11.38 0.00loop2 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 19.93 0.00 0.00 9.65 0.00 12.31 0.00loop3 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 41.81 0.00 0.00 14.23 0.00 18.88 0.00loop4 0.01 0.00 0.01 0.00 0.00 0.00 0.00 0.00 6.61 0.00 0.00 1.12 0.00 0.50 0.00loop5 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 1.60 0.00 0.00 0.00sda 0.24 0.52 3.45 14.18 0.17 0.56 41.05 51.90 3.56 31.99 0.02 14.40 27.51 4.51 0.34 4. 查看网络带宽使用率/proc/net/dev 文件中记录了网络相关的使用情况，其中分别记录了发送和接收的数据包总数、收发的错误包数以及收发的丢失包数等。取单位时间内发送和接收的数据包总包数(totalPackets)，除以网络的基本带宽（bandWidth）: pnet = 100%*totalPackets/bandWidth 12345Lance# cat /proc/net/devInter-| Receive | Transmit face |bytes packets errs drop fifo frame compressed multicast|bytes packets errs drop fifo colls carrier compressed lo: 2729345 46942 0 0 0 0 0 0 2729345 46942 0 0 0 0 0 0enp2s0: 558026941 723202 0 11733 0 0 0 105753 23827630 275738 0 0 0 0 0 0 bytes: 接口发送或接收的总字节数 packets: 接口发送或接收的总数据包数 errs: 有设备驱动程序检测到的发送或者接收错误的总数 drop: 设备驱动程序丢弃的数据包总数 fifo: FIFO 缓冲区错误的数量 frame: 分组帧错误的数量 colls: 接口上检测到的冲突数 compressed: 设备驱动程序发送或接收的压缩数据包数 carrier: 由设备驱动程序检测到的载波损耗的数量 multicast: 设备驱动程序发送或接收的多播帧数]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Cpu</tag>
        <tag>Mem</tag>
        <tag>Disk</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 从源码编译并安装 Nginx]]></title>
    <url>%2F2018%2F09%2F12%2FCentOS%20%E4%BB%8E%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%B9%B6%E5%AE%89%E8%A3%85%20Nginx%2F</url>
    <content type="text"><![CDATA[Linux 系统要求Nginx 在 Linux 操作系统下运行的时候，要想获取高并发能力，要求 Linux 内核必须在 2.6 以上，可通过以下命令查看 Linux 内核版本。12$ uname -r2.6.18-128.e15 安装 Nginx 的必备软件通过以下命令安装使用 Nginx 必备的软件：12$ sudo yum update$ sudo yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel 其中： gcc 和 gcc-c++ 为 c/c++ 编译器 PCRE 即 Perl 兼容正则表达式，如果我们在 nginx.conf 中使用到了正则表达式，那么必须在编译时将 pcre 库编译进 Nginx。pcre-devel 是使用 PCRE 做二次开发时所需要的开发库，包括头文件，这也是编译时所必需的。 lib 库用于对 HTTP 包的内容做 gzip 格式的压缩。zlib-devel 是二次开发所需要的库。 open-ssl 用来支持 SSL。编译与安装从 Nginx 官网 https://nginx.org/en/download.html 下载最新的 Nginx 源码，放在任意目录下，然后解压1$ tar -xf nginx-1.xx.0.tar.gz 进入解压后文件夹，执行以下命令123$ ./configure$ make $ sudo make install 其中，./configure 用来生成 make 所必须的一些文件。Nginx 安装完成后的目录默认在 /usr/local/nginx 。 优化 Linux 内核参数默认的 Linux 内核参数不符合用于支持高并发访问的 web 服务器的定义，因此需要优化内核参数，需要修改 /etc/sysctl.conf 文件，常用配置如下。123456789101112131415fs.file-max = 999999 # 进程可以同时打开的最大句柄数，直接限制最大并发连接数net.ipv4.tcp_tw_reuse = 1 # １表示允许将 TIME-WAIT 状态的 socket 重新用于新的 TCP 链接net.ipv4.tcp_keepalive_time = 600 # 启用 keepalive 时，TCP 发送 keepalive 消息的频度net.ipv4.tcp_fin_timeout 30 # 服务器主动关闭连接时，socket 保持在 FIN-WAIT-2 状态的时间 net.ipv4.tcp_max_tw_buckets = 5000 # TIME-WAIT 套接字数量的最大值net.ipv4.ip_local_port_range = 1024 61000 # UDP 和 TCP 连接中本地端口取值范围net.ipv4.tcp_rmem = 4096 32768 262142 # TCP 接收缓存的最小值，默认值，最大值net.ipv4.tcp_wmem = 4096 32768 262142 # TCP 发送缓存的最小值，默认值，最大值net.core.netdev_max_backlog = 8096 # 当网卡接收数据包的速度大于内核处理速度时，会有一个队列保存这些数据包，该参数表示该队列的最大值net.core.rmem_default = 262144 # 内核套接字接收缓存区默认的大小net.core.wmem_default = 262144 # 内核套接字发送缓存区默认的大小net.core.rmem_max = 2097152 # 内核套接字接收缓存区的最大大小net.core.wmem_max = 2097152 # 内核套接字发送缓存区的最大大小net.tcp_syncookies = 1 # 该参数与性能无关，用于解决 TCP 的 SYN 攻击 net.tcp_max_syn.backlog = 1024 # TCP 三次握手接收 SYN 请求队列的最大长度 然后执行 sysctl -p 即可使上述命令生效。 参考书籍：《深入理解 Nginx：模块开发与架构解析》第二版。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 16.04 引导修复（boot-repair）]]></title>
    <url>%2F2018%2F09%2F11%2FUbuntu%2016.04%20%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D%EF%BC%88boot-repair%EF%BC%89%2F</url>
    <content type="text"><![CDATA[原文转载自：https://blog.csdn.net/laocaibcc229/article/details/79274412 问题描述：在win10的基础上安装了ubuntu16.04，但是后来重新安装了win10，导致ubuntu的引导消失。查找了多种方法，包括easyBCD，rEFind与bootice等，都没有成功，最终用U盘启动盘进行修复，解决了这个问题。 解决方案：1.制作一个U盘启动盘。下载对应的ubuntu系统，用UltraISO制作Ubuntu U盘启动。 2.打开电脑后选择u盘启动盘，然后选择try ubuntu without install。试用不安装。 3.进入ubuntu系统后，连接好网络，打开终端，输入下面命令，按照提示操作。1sudo add-apt-repository ppa:yannubuntu/boot-repair &amp;&amp; sudo apt-get update 4.完成后，终端中输入下面命令：1sudo apt-get install -y boot-repair &amp;&amp; boot-repair 会出现如下界面，选择recommended repair 5.按照boot repair提示的操作进行，完成后重启电脑即可完成。]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[加权法排序二值序列所记录的对象集]]></title>
    <url>%2F2018%2F09%2F08%2F%E5%8A%A0%E6%9D%83%E6%B3%95%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%80%BC%E5%BA%8F%E5%88%97%E6%89%80%E8%AE%B0%E5%BD%95%E7%9A%84%E5%AF%B9%E8%B1%A1%E9%9B%86%2F</url>
    <content type="text"><![CDATA[问题给定一串 6 位 0-1 序列， 如 ‘111111’，该序列记录着集合内 A, B, C, D 四个元素的大小。其中每一个比特的含义如下： 第 1 位，表示 A 与 B 的大小关系，为 0 表示 A&lt;B， 为 1 表示 A&gt;B; 第 2 位，表示 B 与 C 的大小关系，为 0 表示 B&lt;C， 为 1 表示 B&gt;C; 第 3 位，表示 C 与 D 的大小关系，为 0 表示 C&lt;D， 为 1 表示 C&gt;D; 第 4 位，表示 A 与 C 的大小关系，为 0 表示 A&lt;C， 为 1 表示 A&gt;C; 第 5 位，表示 B 与 D 的大小关系，为 0 表示 B&lt;D， 为 1 表示 B&gt;D; 第 6 位，表示 A 与 D 的大小关系，为 0 表示 A&lt;D， 为 1 表示 A&gt;D; 根据给定的 0-1 序列，将 A, B, C, D 四个对象按升序排列。 解决方法可以使用加权法，四个对象的初始权重都赋值为 0，依次判断序列中的每一位值，根据值来给相应的较大对象加权。例如，对于序列 ‘111111’，第 1 位为 1，则对象 B 权重加 1，第 2 位为 1， 则对象 C 权重加 1；以此类推；最后对象 A, B, C, D 的权重分别为 0, 1, 2, 3 ， 根据这个权重就可以给四个对象排序了！ 代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;char tags[6][2] = &#123; &#123; 0, 1 &#125;, &#123; 1, 2 &#125;, &#123; 2, 3 &#125;, &#123; 0, 2 &#125;, &#123; 1, 3 &#125;, &#123; 0, 3 &#125;&#125;;char* sort(char *series, int len)&#123; char *data; // tmpser 用来记录 A,B,C,D 四个对象的权重，初始权重都为 0 char tmpser[4] = &#123;0&#125;; int i; for(i=0; i&lt;len; i++) &#123; if(series[i] == 0) tmpser[tags[i][1]]++; else tmpser[tags[i][0]]++; &#125; data = (char*)malloc(sizeof(char)*4); data[tmpser[0]] = 'A'; data[tmpser[1]] = 'B'; data[tmpser[2]] = 'C'; data[tmpser[3]] = 'D'; return data;&#125;int main()&#123; char series[6] = &#123; 1, 1, 1, 1 ,1 ,1 &#125;; char *data, i; data = sort(series, 6); for(i=0; i&lt;4; i++) &#123; printf("%c ",data[i]); &#125; printf("\n"); return 0;&#125; 输出结果如下： D C B A]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
        <tag>加权法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx + Yii2 配置]]></title>
    <url>%2F2018%2F07%2F20%2FNginx%20%2B%20Yii2%20%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[之前写的一个 yii2 应用一直跑在 apache2 上，最近做压测发现 apache2 的并发处理能力的确差了点，于是想到将应用转移到 nginx 上，以下记录整个迁移过程。 安装 nginx由于本人用的是 ubuntu16.04 ，只要使用以下命令就能快速安装 nginx 了。1sudo apt-get install nginx -y 由于之前本机安装了 apache2，如果在安装的时候报了一大堆错误，那么很有可能是在运行的 apache2 影响到了安装过程，此时需要先停止 apache2 ，可通过以下命令。1sudo service apache2 stop nginx 成功安装后，相关的配置目录在 /etc/nginx 。可以通过以下命令来启动 nginx1sudo /etc/init.d/nginx start 此时访问本地 80 端口即可看到 nginx 欢迎页面。 php7.0-fpm 与 nginxnginx 与 php-fpm 通信有两种方式，一种是通过 TCP，另外一种是 unix socket 。据说两者在一般情况下没有太大差异，但是在高并发情况下，unix socket 方式性能要优异一些。修改/etc/php/7.0/pool.d/www.conf 相应内容如下:1listen = /run/php/php7.0-fpm.sock 因此，在 nginx 的配置文件中就必须要使用相应的方式，配置如下1234567891011121314151617181920212223242526server &#123; listen 886 default_server; listen [::]:886 default_server; root /Myweb/yii2/web; index index.php index.html index.htm index.nginx-debian.html; # rewrite route if (!-e $request_filename)&#123; rewrite ^/(.*) /index.php last; &#125; server_name _; location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; &#125; location ~ \.php$ &#123; # include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.0-fpm.sock; include fastcgi.conf; &#125;&#125; 以上配置，监听 886 端口，服务器根目录为 /Myweb/yii2/web ，对应 yii2 的入口。 fastcgi_pass unix: /run/php/php7.0-fpm.sock 表示使用 unix socket 方式与 php-fpm 通信。 include 的根目录为 /etc/nginx/。 开启 nginx 的路由重写以上配置文件中，如下几行起到了开启路由重写的作用。之前看到很多博文说要另写文件去开启路由重写，后来才发现只要在 sever 配置内写入重写规则即可，没必要另外再新建重写文件。123if (!-e $request_filename)&#123; rewrite ^/(.*) /index.php last;&#125; rewrite 是路由重写的指令，根据正则表达式的内容，重定向到replacement，结尾是flag标记。 rewrite [flag]; 关键字 正则 替代内容 flag标记 具体的可参考其他博客。 参考链接： 总结Ubuntu下部署LNMP环境 Nginx URL重写（rewrite）配置及信息详解]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Yii2</tag>
        <tag>Nginx路由重写</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[批量 ab 测试]]></title>
    <url>%2F2018%2F07%2F19%2F%E6%89%B9%E9%87%8F%20ab%20%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[最近在做服务器压测，想到可以通过 shell 脚本调用压测工具 ab 来进行多次测试。大致的想法是： 通过 shell 脚本循环调用 ab 压测工具得到多次压测日志，并分类保存； 通过 shell 脚本循环调用 awk 工具将每个日志中的 90% 时间提取出来。 ab 工具ab是apache自带的一个很好用的压力测试工具，当安装完apache的时候，就可以在bin下面找到ab。一个简单的 demo 如下：1ab -c 10 -n 100 -H "Authorization:Bearer nAuhWwS6xea7BcyCfVy5VoKF7MsAHDTtX7ABzN" http://domain/path 其中 -c 代表并发数，-n 代表请求数，-H 要发送的 Header。返回结果示例及各参数意义如下：123456789101112131415161718192021222324252627282930313233343536373839404142This is ApacheBench, Version 2.3 &lt;$Revision: 1706008 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking 101.132.123.35 (be patient).....doneServer Software: Apache/2.4.18 # 服务器类型及其版本Server Hostname: &lt;Hostname&gt; # 请求的主机名Server Port: 84 # 端口号Document Path: /v1/door/helps # 请求的路径Document Length: 1143 bytes # 返回数据的大小Concurrency Level: 10 # 并发规模Time taken for tests: 0.934 seconds # 总请求时间Complete requests: 100 # 完成的请求数Failed requests: 0 # 失败的请求数Total transferred: 131900 bytes # 总共传输的字节数HTML transferred: 114300 bytes # 总 html 字节数Requests per second: 107.04 [#/sec] (mean) # 吞吐量Time per request: 93.427 [ms] (mean) # 用户平均等待时间Time per request: 9.343 [ms] (mean, across all concurrent requests) # 服务器平均处理时间，即吞吐量倒数Transfer rate: 137.87 [Kbytes/sec] received # 每秒获取的数据长度Connection Times (ms) min mean[+/-sd] median maxConnect: 7 9 1.2 9 13Processing: 57 83 9.0 83 119Waiting: 57 83 9.0 83 119Total: 67 93 9.4 92 128Percentage of the requests served within a certain time (ms) 50% 92 66% 95 75% 96 80% 99 90% 105 # 90%的请求在105ms内 95% 112 98% 119 99% 128 100% 128 (longest request) shell 脚本多次测试一个可多次进行压测的 demo 如下：1234567891011121314151617#!/bin/bashurlIndex="http://Hostname/v1/door/helps"Header="Authorization:Bearer nAuhTiWwS6xea7BcyCfVy5VoKF7MsAHDTtX7ABzN" # Headerdeclare -A concurrentconcurrent=(['c']=0 ['n']=100)for i in &#123;0..9&#125;;do let concurrent['c']+=10; # shell数值运算 dirName=tests/Getdb/c$&#123;concurrent['c']&#125;n$&#123;concurrent['n']&#125;; mkdir -p $dirName; for j in &#123;0..9&#125;; do outFile=$&#123;dirName&#125;/"time"$j; ab -c $&#123;concurrent['c']&#125; -n $&#123;concurrent['n']&#125; -H "$&#123;Header&#125;" -e $&#123;outFile&#125; $&#123;urlIndex&#125;; donedone 要注意的是 shell 进行数值运算时不能对数字直接操作，需要使用 let 命令或者 [] 和 (()) 操作符。然后在 mkdir 的时候，最好带上 -p 参数，免得报错。 然后 -H 参数后面带字符串，需要用双引号包起来。 shell 脚本后处理输出日志得到的日志目录如下所示123456789101112131415+-- tests +-- Get +-- c10n100 | +-- time0 | +-- time1 | +-- time2 | +-- time3 | +-- time4 | +-- time5 | +-- time6 | +-- time7 | +-- time8 | +-- time9 +-- c20n100 +-- c30n100 一个个查看日志文件中 90% 用时会显得比较麻烦，于是想到可以用 shell 脚本调用 awk 工具， demo 如下：1234567891011121314151617#!/bin/bashdeclare -A concurrentconcurrent=(['c']=0 ['n']=100)fileName="file.txt" # 输出文件名for i in &#123;0..9&#125;;do let concurrent['c']+=10; dirName=tests/Get/c$&#123;concurrent['c']&#125;n$&#123;concurrent['n']&#125; # 取日志文件 echo $&#123;dirName&#125; &gt;&gt; $fileName # 输出测试条件，一行 for j in &#123;0..9&#125;; do dataFile=$&#123;dirName&#125;/"time"$j; awk '/^90/&#123;print&#125;' $&#123;dataFile&#125; &gt;&gt; $fileName # 将 awk 输出的信息重定向到 file.txt 中 donedone awk 的一般使用方法如下：1awk 'RegexPattern&#123;command&#125;' srcFile ‘ ‘ 内表示正则表达式+命令，如以下命令找出文件 time0 中以 “9”开头的行，并且输出到 file.txt 文件中。1awk '/^90/&#123;print&#125;' time0 &gt;&gt; file.txt]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>ab</tag>
        <tag>服务器压测</tag>
        <tag>shell</tag>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[查找32位无符号整形数中1的个数]]></title>
    <url>%2F2018%2F03%2F05%2F%E6%9F%A5%E6%89%BE32%E4%BD%8D%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B4%E5%BD%A2%E6%95%B0%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0%2F</url>
    <content type="text"><![CDATA[代码如下1234567void func(uint32_t x)&#123; uint32_t n; for(n=0; x; n++)&#123; x &amp;= x-1; &#125; return n;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一种远程部署项目的方案]]></title>
    <url>%2F2017%2F11%2F08%2F%E4%B8%80%E7%A7%8D%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[条件 一台本地主机和一台远程aliyun主机 两个主机都装有 ssh, git 确保阿里云防火墙开放了ssh端口,一般端口号是22 配置远程主机aliyun新建用户并赋予root权限 12345$ adduser git #新建用户git$ vim /etc/sudoers #修改此文件，新增一行 git ALL=(ALL:ALL) ALL$ su git #切换至用户git$ sudo mkdir /opt/git-repo #此目录用于存放git项目，进行版本管理$ sudo chown git:git -R /opt/git-repo #将git-repo所有者赋予git 本地主机新建git仓库，并推送至远程主机 1234$ git clone --bare my-project my-project.git$ scp -r my-project.git git@www.server.com:/opt/git-repo #一定要确保远程主机上的用户git对git-repo文件夹有绝对的操作权限$ cd my-project$ git remote add aliyun git@www.server.com:/opt/git-repo/my-project 至此，本地主机就可以用名为aliyun的远程主机上的my-project仓库进行版本管理了。而且，远程主机本地进行项目同步，见如下命令: 123$ cd my-project$ git remote add local /opt/git-repo/my-project$ git pull local master 总结这种远程部署方法简单，安全而且高效，比较适合中小型项目的远程部署。 参考pro-git]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初探pagodabox]]></title>
    <url>%2F2017%2F07%2F08%2F%E5%88%9D%E6%8E%A2pagodabox%2F</url>
    <content type="text"><![CDATA[1. 概述这几天在学习PHP编程之道的时候，偶然发现了Paas这一神奇的东东。Paas(Platform as a Service)，提供了运行PHP应用程序所必须的系统环境和网络架构，这意味着只需要做少量配置就可以运行PHP应用程序或者PHP框架。在众多的Paas提供商中，试过PagodaBox，AppFog，Heroku和OpenShift，最后发现PagodaBox才是最适合用来捣鼓个人PHP应用。注册PagodaBox后，即可最多建立三个免费应用，每个应用的代码服务主机(Code Services)的配置是单核CPU，128MB的RAM和4GB的DISK；每个应用可以建立多个存储主机和数据库主机。详细信息参看Pagoda Box官网。 2. 管理应用代码(Code)和数据(Data)总的来说，管理一个Pagoda Box应用主要是管理它的代码和数据。管理代码是通过Git操作来实现的，管理数据的方式则比较多样，可以通过代码服务主机间接控制数据库主机，也可以通过SSH方式远程控制数据库主机。 2.1 管理代码(Code)首次提交，需初始化Git123456cd /your/application/dirgit initgit add .git commit -m "What you want to express"git remote add pagoda git@git.pagodabox.io:apps/drelang.gitgit push pagoda master 初次建立SSH连接，需要进行一些配置。首先要在本地生成SSH密匙，密匙在”~/.ssh/“目录下，若有密匙则不需要再另外生成密匙。这个SSH密匙可以用来建立任何SSH链接，也就是说可以链接非Pagoda Box的主机，这个涉及到SSH连接，可以查看相关资料。然后讲密匙目录下的共匙”id_rad.pub”里面的内容复制到Pagoda Box个人账户中的SSH管理项内，之后就可以建立起本地与远程主机的SSH服务了。之后提交代码只需下面那些操作1234cd /your/application/dirgit add .git commit -m "What you want to express"git push pagoda master 每次提交，远程代码服务主机都会重新配置环境，这个就导致代码部署效率底下，想找到一种只提交代码而不需要远程代码服务主机重新配置环境的方法。 2.2 管理数据(Data)数据有MySQL，MariaDB，PostgreSQL，MongoDB，Redis和Memcached等，目前只管理过MySQL。管理方式有通过代码服务主机间接控制数据库主机和通过SSH方式远程直接控制数据库主机。这两种方式都需要在应用控制面板(DashBoard)上开启SSH方式。 2.2.1通过代码服务主机(Interacting with Code Servers)12ssh gopagoda@75.126.154.152 -p 2541mysql -h $DATABASE1_HOST -P $DATABASE1_PORT -u $DATABASE1_USER -p$DATABASE1_PASS $DATABASE1_NAME 第一行代码参看自己Code Servers的SSH框中的Raw SSH Credentials面板。第二行代码是万能代码，拿去直接用就行，因为那些全局变量在应用生成的时候就随之生成了，每个用户的每个应用的全局变量内容都不一样。 2.2.2通过SSH端口直连在DashBoard的Data框的SSH框的Raw SSH Credentials面板下可以看到连接代码1ssh gopagoda@75.126.154.152 -p 2477 -N -L :3306:192.168.0.2:3306 很不凑巧，这种方式在我电脑上行不通。于是乎，我就用Dbeaver这个工具来实现本地管理远程数据库。为了使用这个工具，需要进行一定的配置。 2.2.2.1安装JAVA环境我使用的方式是先在JAVA官网下载相应的JDK，然后解压到/usr/jdk文件夹下，然后打开/etc/profile文件来配置环境变量。1234export JAVA_HOME=/usr/jdk/jdk1.8.0_101export JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/libexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin 第一行的路径是存放解压后文件夹的路径。修改好profile文件后，使用SUPER用户运行sourc /etc/profile命令，之后启动Dbeaver也是在超级用户模式下。在命令行运行java和javac看JAVA环境是否配置好。 2.2.2.2安装Dbeaver到Dbeaver官网下载对应版本，然后解压。123sucd /dbeaver./dbeaver 2.2.2.3使用Dbeaver进入Dbeaver后，新建连接。一些必要信息都可以在DashBoard上查找得到。一个需要注意的地方时，需要把SSH私匙复制到/Dbeaver/SSH文件夹下，若没有，需要新建.见下图，然后给连接设置一个密码(specify password). 3. 结尾小结一下本文。1.建立Pagoda Box账户，并免费创建个人PHP应用2.通过Git管理Code Servers3.通过Dbeaver管理Data]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>pagodabox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用pyinstaller打包PyQt5程序]]></title>
    <url>%2F2017%2F05%2F18%2F%E7%94%A8pyinstall%E6%89%93%E5%8C%85PyQt5%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[安装pyinstallerWindows环境下使用CMD，运行如下命令1pip3 install pyinstaller 比较高版本的pyinstaller安装时会自动安装32位的依赖。 使用pyinstaller定位到程序的主入口目录，使用以下命令生成EXE文件。1pyinstaller -F -w -i d:\tmp\main.ico main.py 若提示“failed to execute script pyi_rth_qt5plugins”，则需要制定包路径123456789pyinstaller -F -w -i .\main.ico -p d:\python35\Lib\site-packages\PyQt5\Qt\bin main.py### 参数说明-F 表示生成单个可执行文件-w 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！-p 表示你自己自定义需要加载的类路径，一般情况下用不到-i 表示可执行文件的图标## 加载资源文件如果程序中使用到了图片，视频等文件，则应该使用pyrcc生成资源文件。首先，新建一个.qrc文件，以下文件命名为images.qrc，内容格式如下： ​ img/image1.png​ img/image2.png​ img/image3.png 1234&apos;img&apos;是存放图片的文件夹，用的是相对路径。然后去存放文件的目录下，执行以下命令​```cmdpyrcc5 -o images_qr.py images.qrc image_qr.py是生成的python文件。在要使用图片资源的Python文件里，要使用以下代码引用：12import images_qr #假设images_qr.py文件与主python文件同目录self.setWindowIcon(QtGui.QIcon(':/img/image1.png')) #修改图片路径，一定要在路径前面加上冒号 参考用 PyInstaller 打包基于 PyQt 的程序遇到的坑,使用PyInstaller打包Python程序]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3 tkinter 使用时遇到的困难]]></title>
    <url>%2F2017%2F04%2F05%2FPython3%20tkinter%20%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9B%B0%E9%9A%BE%2F</url>
    <content type="text"><![CDATA[前言花了几天，基于python3的pyserial和tkinter库写了一个简陋的串口上位机软件。有些widgets看起来用的很方便，实际用的时候有很多要注意的地方，以下总结了几点。 小麻烦Linux和Windows在细节上的区别表示路径的差异 Linux Windows 相对路径 ./images/serial.png .\images\serial.png 绝对路径 /home/images/serial.png C:\images\serial.png 串口地址不同Linux下，串口地址一般是”/dev/ttyUSB0”，而Windows下，串口地址一般是”COM1”，在使用时要注意区别。以下代码，先判断系统类型，然后执行相应的打开串口操作。123456plat = platform.system()if plat == "Linux": port = '/dev/ttyUSB0'elif plat == "Windows": port = "COM3"ser = serial.Serial(port) 更改GUI窗口图标方法不一样Windows下，直接用一行代码就行，而Linux下，则需要对图片文件进行一定的处理后，才能完成更换默认图标的功能。以下代码，判断系统类型后，进行相关操作。12345if platform.system() == "Windows": root.iconbitmap('.\images\serial_port.ico')elif platform.system() == "Linux": img = Image("photo",file="./images/serial_port.png") root.tk.call('wm','iconphoto',root._w,img) 上位机与下位机之间的数据传输下位机通过串口只能接收类型为字节(Byte)的数据，而用python的open()函数打开文件后，得到的是文件(file)对象，对文件对象进行read()方法后，可以得到文件中的字符串(String)，字符串是不能直接传递给下位机的，必须经过处理，将字符串(Strings)转换成字节串(Bytes).python中的数据类型转换见之前的博客bytes,strings,decimal and hex in Python3 tkinter中的Text()控件与Scrollbar()控件配合为了实现拖动滚动条让文本框中的内容随之滚动，必须要将Text()和Scrollbar()配合起来，见下例.12345678from tkinter import *root = Tk()text = Text(root)text.pack(side=LEFT)scroll = Scrollbar(root)scroll.pack(side=RIGHT)text.config(yscrollcommand=scroll.set)scroll.config(command=text.yview)]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>tkinter</tag>
        <tag>pyserial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bytes,strings,decimal and hex in Python3]]></title>
    <url>%2F2017%2F03%2F07%2Fbytes%2Cstrings%20and%20int%20in%20Python%2F</url>
    <content type="text"><![CDATA[python中字节，字符和整数之间的转换 decimal and hex1234#decimal to hexhex(16) #==&gt;0x10#hex to decimalint('0x10',16) #==&gt;16 strings to int123456#string to decimalint('10') #==&gt;10#string to hexint('10',16) #==&gt;16#hexic string to hexint('0x10',16) #==&gt;16 bytes to int1234#to int (one byte)struct.unpack('B',bytes(b'\x01')) #==&gt;(1,) a tuple#to long int (four bytes)struct.unpack('&lt;L',bytes(b'\x01\x00\x00\x00')) #==&gt;(1,) int to bytes1234#to one bytestruct.pack('B',1) #==&gt;b'\x01'#to two bytesstruct.pack('HH',1,2) #==&gt;b'\x01\x00\x02\x00' strings to bytes1234#to syllabified code'12abc'.encode('ascii') ==&gt; b'12abc'#to hexadecimal bytesbytes().fromhex('010210') ==&gt; b'\x01\x02\x10' bytes to strings123456789#decode to strings bytes(b'\x31\x32\x61\x62').decode('ascii') ==&gt; 12ab#to hexadecimal bytesstr(bytes(b'\x01\x0212'))[2:-1] ==&gt; \x01\x0212hex to byte---```pythonhex(16).encode('adcii') ==&gt; b'\x10' 用格式化`print(“%X”%255) #输出大写十六进制的FF各种数据类型之间的转换见博客python常用的十进制，十六进制，字符串，字节串之间的转换unpack函数的格式见博客Python使用struct处理二进制(pack和unpack用法)]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《把时间当作朋友》读书心得]]></title>
    <url>%2F2016%2F04%2F02%2F%E3%80%8A%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E4%BD%9C%E6%9C%8B%E5%8F%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[前言李开复说过“看过的我会忘记，听过的我会记得，做过的我会理解”。这大概就是我想写写读书心得的原因吧，只为加深对一本书的理解。最近读了李笑来的《把时间当作朋友》一书，深有感悟，怎么说呢，用他本人的话来讲，这不是一本关于时间管理的书，也不是一本成功学的书，更不是心灵鸡汤式的书，更更不是一本讲大道理的书，它仅仅提倡的是要学会正确地运用心智使自己获得解放。他提倡的许多思维方式、思考方法很独特，但是却真的很有道理。1234要管理的不是时间，而是自己用正确的方式做正确的事情运用心智--------&gt;获得解放一切都靠积累 正文想了很久，纠结于如何较好的呈现这个读书心得，最后还是决定按照原书的目录结构来吧，主要是提取一些我觉得很有说服性的一些话语。 -困境-问题我们没能按时完成任务的原因及相应解决方法如下表 问题 解决方法 没有按时开始执行任务 按时开始执行任务 错误估算完成任务所需时间 正确估算完成任务所需时间 在任务的执行过程中出现了差错 在执行任务的过程中不要出差错 慌乱既勤奋又懒惰，时间恐慌症—&gt;瞎忙，方法不正确 解决自身要意识到：123我们无法管理时间我们真正能管理的，是我们自己人们很难接受与已知知识和经验相左的信息或 观念 解决问题的核心只有一个：一切都靠积累. -醒悟-孰主孰仆我们可以用自己的大脑控制自己的大脑。要意识到关于自身的“自己不知道的”和“自己不知道、别人也不知道的”的存在。运用心智获得解放，别再让自己跟着感觉走。 何谓心智简单的说，一个人的心智就是其过往获得的一切知识及经验的总和（包括基于这些知识和经验造就的思考方法、思考模式）。 -现实-速成绝无可能总是不由自主的期望速成的根源：123自己的欲望无限要完成的事情太多自我满意度的不断下降 出路只有一个起点，那就是接受现实。告诉自己：我有不足，我需要时间，我没办法一蹴而就。 交换才是硬道理要学会用正确的方式去拿我有的交换我想要的。 完美永不存在越是能力差的人，越有那种非常不现实又极其脆弱的完美主义倾向。往往所谓的“做不好”，其实是“不能一下子做好”，但问题在于，没有什么事情是能够一下做好的。 未知永远存在我们害怕未知，害怕不确定的东西，但必须意识都未知永远存在，要尝试适应在未知中前行。焦虑是导致时间浪费、效率底下的根源之一。当有问题解决不了时，可以先把它记下来，然后继续前行。 现状无法马上摆脱没有人能够逃脱现实的束缚。接受现状才是最优策略—-&gt;有什么做什么，有什么用什么；做什么都做好，用什么都用好。 与时间做朋友与时间做朋友的方法很简单：用正确的方法做正确的事情 -管理-估算时间墨菲定律：凡事只要可能出错，就会出错侯士达法则：完成一个任务实际花费的时间总会超过计划花费的时间，就算制定计划的时候考虑到本法则，也不能避免这种情况的发生。提高估算时间的能力：做任何事情之前先判断其熟悉程度，再据此判断估算完成任务所需要的时间。 及时行动从现在就开始，能做多好就做多好，总好过什么都不做。没有必要在意来自他人的、非建设性的负面评价。没有谁一开始就能做对、就能做好。所有做对、做好的人都是一路磕磕绊绊走过来的，这就是生活的常态。 直面困难很多人实际上根本不知道自己所谓的“喜欢做某件事情”很可能只是因为那件事情相对简单、容易获得奖励而已。所有真正踏实做事的人都知道，任何任务的绝大部分都是枯燥而又无趣的，所谓有创意的部分，可能连1%都不到。 关注步骤做任何事情前要考虑三方面：内容What，原因Why，方法How大多数人都知道自己究竟想要什么，也知道为什么要得到，却始终没有弄明白怎样做才能得到。 并行串行并行做机械事情和非机械事情。番茄工作法，保持相对长时间的高效率工作。 感知时间 记录开销可以用一个table来记录每天的活动，基于过程的记录要比基于结果的记录更为详尽。 事项 耗时 * — @ — 制定预算根据事情的轻重缓急来制定时间预算。 计划Peopel don’t plan to fail,they fail to plan.计划成功的前提：目标现实可行长期计划是需要通过实践才能习得的能力。有些时候没必要做计划，因为计划固然重要，行动更为重要。 流程学习、工作和生活中，面对重复性的任务时，先将其做完一次，然后马上总结、整理，搞清流程，再考进一步的实践把它变成“闭着眼睛也能做好”的事，这样能提高效率。 预演万事皆可提前准备，万事皆需提前准备。如果不能克服恐惧，那就提前做好准备迎接恐惧、适应恐惧。 验收做事总是半途而废，往往是没有做好验收机制。 -学习-效率本质学习是投资回报率最高的行为，千万不要拒绝学习。 基本途径观察、体验、试错（低级）—&gt;阅读（高级） 主要手段除了基本途径外，正确的思考，才是获取真正意义上的知识的主要手段 经验局限个体、群体的经验都有限，不仅存在无法通过个体或者群体经验获得的知识，还存在与现有经验相悖的知识。 自学能力1234自学能力的基础是阅读理解能力；检索能力建立在相当熟练的阅读理解能力的基础之上；写作能力在自学能力中占据重要位置；实践能力是自学能力最终转化为真正价值的根本。 永远保持开放的心态，不要成为对信息和知识“选择性输入”的受害者。正确理解学习中时间和进展的关系曲线。 -思考-勤于思考独立思考，就是从别人知道一个结论的时候，自己动脑重新推演一遍，看看得出的结论有没有漏洞或者不合理的地方，衡量一下结论到底有没有道理的过程。 most people would die sooner than think ---in fact they do so. --Bertrand Russell, The ABC of Relativity,1925 译文：很多人宁愿死也不思考。事实上，他们确实死的很快。 思维陷阱犯逻辑错误的最重要的两个原因：概念不清和拒绝接受不确定性 克服恐惧恐惧需要克服，勇气需要培养 -交流-学会倾听事实上，大多数人并不懂得应该如何有效地倾听。为了真正做到有效倾听，最需要克制的就是“过早质疑”。倾听的过程中，可以利用多余的脑力处理两个方向的信息：“回顾”与“预期”。一旦决定倾听，就要迅速帮助说者进入“倾听”状态。 说与不说可言而不言，失人，不可言而言，失言。 交流守则 - Everyone makes his or her own truth. - One person's truth is another person's error. - Truth is relative. - Truth is constantly changing. - All ideas are equal. 第一个原则：有意义的讨论的前提是双方不仅要“相互竞争”，更要“相互合作”。第二个原则：真理是独立存在的，他从来不会依附于任何个人或者集体。第三个原则：真理不变，也不会因任何人而变；不停变化的只是人们对真理的解释或理解。 正确复述为了保证沟通顺利，往往需要添加一个验证机制，或者说反馈机制。 勤于反思 - 深刻了解经验的局限 --> - 时时刻刻保持警惕 --> - 使用记录，使自己能够记住更多经验 --> - 通过观察和阅读汲取他人的经验 --> - 试用类比来跨越未知与已知的障碍 --> -静心等待以拥有不能快速获得的经验 --* -应用-兴趣往往不是有兴趣才能做好，而是做好了才有兴趣。 方法方法固然重要，但是比起“用功”来说，方法几乎可以忽略不计。 运气相信运气其实是缺乏自制力的表现。尽管对生活不应该盲目乐观，但一定不能失望悲观。 人脉承认自己能力有限，是保持心理健康的前提。每个人的时间都是有限的，所以，“真正的好朋友”谁都只有几个而已。 - 专心做可以提升自己的事情，学习并拥有更多\更好的技能，成为一个值得他人交往的人 - 学会独善其身，以不给他人制造麻烦为美德，拥自己的独立赢得尊重 自卑在自己的语言中，把“优点”和“缺点”这两个词替换成“特点”。 鼓励永远鼓励身边的人，哪怕多少有些盲目。 效率任何人都不可能100%地有效率，至少不可能总是100%地有效率。 物极必反绝对不要盲目地试图减少睡眠时间；尽量不要减少与家人交流的时间；最好不要放弃自己的社交时间。 积累越早醒悟越好，要坚信积累的力量。 闲语花了将近5个小时，简单的写了一下《把时间当做朋友》的读书心得，第一次在博客上写读书心得，自我感觉写的不咋地吧。废话太多，要点提取的不太够，甚少加入自己思考过后的元素。还是要向打什么呢多学习学习写读书心得的技巧啊。无论如何，慢慢来吧，多积累。Keep fighting!!!]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>Time Management</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB的安装及使用]]></title>
    <url>%2F2016%2F03%2F30%2FMongodb%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[安装1sudo apt-get install mongodb 关闭/开启12sudo service mongodb stopsudo service mongodb start 创建MongoDB存放数据的‘dbpath’123# 根目录下sudo mkdir /datasudo mkdir db 设置连接用户1234$ mongo&gt; use adminswitched to db admin&gt; db.addUser(&quot;root&quot;,&quot;1983&quot;) 设置客户端连接12$ sudo gedit /etc/mongodb.conf#bind_ip = 0.0.0.0 切换数据库1use &quot;dbname&quot;]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git operations]]></title>
    <url>%2F2016%2F03%2F28%2FGit%20operations%2F</url>
    <content type="text"><![CDATA[2016/3/28useful linksGit check existed configuration informationgit config --list change the default editorgit config --global core.editor vim get help1git help &lt;verb&gt; Git init and config initially12345git initgit add .git add READMEgit commit -m &apos;initial project version&apos; clone the remote repository1git clone git://github.com/langhf/langhf.github.io check status of the present files1git status the .gitignore file12345678910111213# 此为注释 – 将被 Git 忽略# 忽略所有 .a 结尾的文件*.a# 但 lib.a 除外!lib.a# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO/TODO# 忽略 build/ 目录下的所有文件build/# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txtdoc/*.txt# ignore all .txt files in the doc/ directorydoc/**/*.txt remove files1git rm *filename* view the existed remote repositories1git remote add new remote repository要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行 git remote add [shortname] [url]：123456$ git remoteorigin$ git remote add pb git://github.com/paulboone/ticgit.git$ git remote -vorigin git://github.com/schacon/ticgit.gitpb git://github.com/paulboone/ticgit.git 推送数据到远程仓库12//git push [remote-name] [branch-name]git push origin master]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[After installing ubuntu15.10]]></title>
    <url>%2F2016%2F03%2F27%2FAfter%20installing%20ubuntu15.0%2F</url>
    <content type="text"><![CDATA[2016/3/27 1.modify you hosts fileFirst of all,visit http://www.laod.cn and download the hosts file.Then,copy the content in the downloaded file into your local hosts file which locates in /etc/hosts.Just excute the command: 1sudo gedit /etc/hosts 2.update and upgrade your system12sudo apt-get updatesudo apt-get upgrade 3.set up the Chinese input method –pinyinclick the keyboard icon in the top-rhight corner of your computer and enter the Set up Fcitx to select Chinese input method –pinyin. 4.install the google-chrome browservisit https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb download the latest package.and then,123sudo apt-get install libappindicator1 libindicator7 sudo dpkg -i google-chrome-stable_current_amd64.deb sudo apt-get -f install Then install Postman. 5.install the Sublime Text 3firstly,go to /usr/bin,and then123sudo add-apt-repository ppa:webupd8team/sublime-text-3sudo apt-get updatesudo apt-get install sublime-text after install the application,you should try to install some useful plugins.In order to init the package control,you can refer to the website Installation - Package Control.For some uesful packages,you can refer常用的sublime插件（很爽哦）.Personally,I recommend OmniMarkupPreviewer, SublimeCodeIntel, BracketHighlighter, Color Highlighter ,Emmet,Pretty JSONgit 6.install Gitfirstly,go to /usr/bin,and then1sudo apt-get install git 7.configure the LAMP environmentfor detailed tutorial,you can refer to Ubuntu 安装 LAMP Server (Debian 系通用) 8.install memcacherefer to the passage Ubuntu + LAMP 增加Memcache扩展模块and 关于Ubuntu下安装phpmyadmin后mysqli丢失的解决.All the PHP extended module is located in /usr/lib/php5/20131226.To enable a module,we should modify the file /etc/php5/apache2/php.ini. And all module’s configuration file are in /etc/php5/mods-available.Modify two places in the php.ini. one12345; Directory in which the loadable extensions (modules) reside. ; http://php.net/extension-dirextension_dir = &quot;/usr/lib/php5/20131226/&quot;; On windows:; extension_dir = &quot;ext&quot; two1234567891011121314151617;;;;;;;;;;;;;;;;;;;;;; Dynamic Extensions ;;;;;;;;;;;;;;;;;;;;;;;; If you wish to have an extension loaded automatically, use the following; syntax:;; extension=modulename.extension;; For example, on Windows:;; extension=msql.dll;; ... or under UNIX:;extension=msql.so; 9.turn on the error_reporting of PHPrefer to Ubuntu下LAMP的PHP错误提示的开启. 10.favorite links in Microsoft Edge browser/media/lang/系统/Users/lang/AppData/Local/Packages/Microsoft.MicrosoftEdge_8wekyb3d8bbwe/AC/MicrosoftEdge/User/Default/Favorites. 11.configure virtual hostsIn /etc/apache2/sites-available1234567891011&lt;VirtualHost *:80&gt;​ ServerName mobileportals.local​ ServerAdmin webmaster@test.tools.directhr.net​ DocumentRoot &quot;/var/www/html/mobileportals&quot;​ &lt;Directory &quot;/var/www/html/mobileportals&quot;&gt;​ Options Indexes FollowSymLinks​ AllowOverride All​ Order allow,deny​ Allow from all​ &lt;/Directory&gt;&lt;/VirtualHost&gt; In /etc/hosts​12//add this ip127.0.0.1 mobileportals.local Then12sudo a2ensite mobileportals.local.confsudo service apache2 restart 12.解决Ubuntu下Sublime Text 3无法输入中文refer to 解决Ubuntu下Sublime Text 3无法输入中文1我尼玛终于能输入中文了，再也不需要从其他地方复制中文了。 但是每次都要通过命令行执行subl才能输入中文 13.装搜狗输入法去官网直接下载即可搜狗输入法 for linux 14.管理系统服务三款不错的管理Ubuntu服务和启动项的软件我装的是bum使用时在命令行输入sudo bum即可 15.Ubuntu输入su提示认证失败的解决方法Ubuntu输入su提示认证失败的解决方法 16. ubuntu 开机自动挂载指定磁盘分区 ubuntu 开机自动挂载指定磁盘分区 17.close system serviceThe most useful commands:12apt-get install sysv-rc-confsudo sysv-rc-conf but the service mysql should be shut down by configuring the file in /etc/init/mysql.conf12345678910# MySQL Servicedescription &quot;MySQL Server&quot;author &quot;Mario Limonciello &lt;superm1@ubuntu.com&gt;&quot;start on runlevel [2345]stop on starting rc RUNLEVEL=[016]respawnrespawn limit 2 5 18.usual operation commands and key bindingsubuntu 终端关机启动命令 和 常用的快捷键123sudo reboot （直接重启系统）sudo shutdown -r now （立刻重启)sudo poweroff （立刻关机） 19.install WPS office安装方式.WPS下载地址字体文件以上安装包双击即可安装。终端命令对应启动word，excel，ppt​123wps //wordet //excelwpp //ppt 20.装Eclipse先装JAVA7环境1sudo apt-get install openjdk-7-jre 然后下载最新版的Eclipsewww.eclipse.org/downloads 21.Ubuntu下非常给力的下载工具–uget+aria2Ubuntu下非常给力的下载工具–uget+aria2 22.musicNetEase-MusicBoxlinks Ubuntu下关闭apache和mysql的开机启动 useful links安装Ubuntu 15.10后要做的事 Hexo+Ubuntu+GithubPages搭建个人博客(基础篇)]]></content>
      <categories>
        <category>Personal</category>
      </categories>
      <tags>
        <tag>ubuntu15.10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown学习与实践]]></title>
    <url>%2F2016%2F03%2F06%2FMarkdown%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[block+list hahaha hahahaha*hahahhahaha add img a Todo list 支持以PDF格式导出文稿 改进Cmd渲染算法使局部渲染技术提高渲染效率 新增Todo列表 修复LaTex公式渲染问题 新增LaTex公式编号功能 edit a law$$E=mc^2$$ highlight codes12&lt;?php echo "Hello world.I'm Markdown."; draw a flow （js并没有导入 ）12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op draw a session （js并没有导入 ）123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! draw a table 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 add audio五月天-知足]]></content>
      <categories>
        <category>Personal</category>
      </categories>
      <tags>
        <tag>好神奇</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Hexo在Github上搭建个人博客]]></title>
    <url>%2F2016%2F03%2F02%2F%E7%94%A8Hexo%E5%9C%A8Github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[闲话之前看一学姐的博客，发现原来可以在Github上免费搭建个人博客，界面元素可完全自己定制，于是上google找攻略，在跳进了几个坑之后，终于是搭建成功了。废话不多说，以下是比较全的教程。 正文那种高大上的教程，我现在肯定是写不出来的啊，就放上我搜到的经验帖。使用GitHub和Hexo搭建免费静态Blog 基本上，上述链接里的教程已经无比完美了。我想分享的是自己踩过的以及被基友们拉进去的坑！ 踩过的坑 Git和Node.js最好用最新版本，一基友就是因为Git版本过低，而导致 不能建立本地与远程Github的连接。 如果发现使用不了hexo deploy指令，那么需要执行以下指令： 1npm install hexo-deployer-git --save 如果还不能使用hexo deploy，那么可能是没有设置Github的SSH，具体教程请看官方教程Generating an SSH key 最大的坑是，你所创建的Github仓库名，一定要是如下格式username.github.io，其中username是你的Github账户名。 结语第一次用Markdown写博客，好多都不会，暂时先写到这吧，还要看高数去。WTF.How miserable a KY-S dog is!!!]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>多坑</tag>
      </tags>
  </entry>
</search>
